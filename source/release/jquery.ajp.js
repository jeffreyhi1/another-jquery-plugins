/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function($){

	if (!$.ajp) $.ajp = { }
	$.ajp.autocomplete = { version: '0.13pa', forms: {}, last: false }

	$.fn.extend({

		ajp$autocomplete: function(options) {

			var defaults = {  

				deltaX: 0,
				deltaY: 0,
				paddingWidth: 0,

				caching: true,

				getUrl: function (needle) {
					return { url: './autocomplete/', params: { 'needle': needle } }
				},

				selectItem: function (ctx, i) { ctx.selected = i },

				parseResponse: function (ctx, resp) {

					ctx.remoteResponse = resp

					var variants = []
					for (var i = 0; i < resp.variants.length; i ++)
						variants.push(resp.variants[i])

					ctx.setVariants(variants)
					ctx.show()
				}
			}

			var options = $.extend(defaults, options);

			$('form').each(function (i, el) { if (!$(el).attr('id')) el.id = 'form-autogenerated-id-' + i })

			return this.each(function(i, e) {

				var api = {

					requestId: 0,
					list: null,
					target: null,
					variants: [],
					selected: -1,
					cache: {},
					skipOne: false,
			
					init: function (target) {

						this.target = target
						this.list = document.createElement('div')
						var objList = $(this.list)
						objList.css('display', 'none').addClass('ajp-autocomplete-list')
						document.body.appendChild(this.list)

						var ctx = this
						var form = $($(this.target).attr('form'))
						if (!$.ajp.autocomplete.forms[form.attr('id')]) {
							$.ajp.autocomplete.forms[form.attr('id')] = true
							form.submit(function (evt) {
								var lists = $('.ajp-autocomplete-list:visible')
								if (lists.length > 0) {
									if (!/explorer/i.test(navigator.appName))
										lists.css({ display: 'none' })
									return false
								}
								return true
							})
							form.find('button[type=submit], input[type=submit]').focus(function () {
								if ($('.ajp-autocomplete-list:visible').length > 0 && $.ajp.autocomplete.last) {
									$($.ajp.autocomplete.last.target).focus();
									$.ajp.autocomplete.last.acquire()
								}
							})
						}
					},

					cancelEvent: function (evt) {
						evt.cancelBubble = true
						if (evt.stopPropagation) {
							evt.stopPropagation()
							evt.preventDefault()
						}
					},

					acquire: function (target) {
						this.hide()
						this.setVariants([])
					},

					setVariants: function (variants, req) {
						if (req === undefined || req >= this.requestId) {
							this.variants = variants
							options.selectItem(this, -1)
						}
					},

					hide: function () {
						$('.ajp-autocomplete-list').css('display', 'none').html('<!-- -->')
					},

					show: function () {

						var html = '';
						var itemClass = ' autocomplete-item-odd';
						for (var i = 0; i < this.variants.length; i ++) {
							if (typeof this.variants[i] == 'string') {
								itemClass = (itemClass.length > 0 ? '' : ' autocomplete-item-odd');
								html += '<div class="autocomplete-item ' + itemClass + (i == this.selected ? ' autocomplete-item-selected' : '') + '">'
									+ this.variants[i]
									+ '<input type="hidden" value="' + i + '"/>'
									+ '</div>';
							}
						}

						var ctx = this;
						$(this.list).html(html).find('.autocomplete-item').mouseover(function (evt) {
							options.selectItem(ctx, $(evt.currentTarget).find('input[type=hidden]:eq(0)').val());
							ctx.show();
						})

						var l = $(this.list);
						var t = $(this.target);
						var pos = t.offset();
						var offsetY = options.deltaY + parseInt(t.css('border-top-width'))
							+ parseInt(t.css('border-bottom-width'))
							+ parseInt(l.css('border-top-width'))
						;
						var paddingWidth = options.paddingWidth //+ parseInt(t.css('border-left-width'))
							//+ parseInt(t.css('border-right-width'))
							- parseInt(l.css('border-left-width'))
							- parseInt(l.css('border-right-width'))
						;
						var display = (this.variants.length > 0 ? '' : 'none');
						l.css({
							left: '' + (pos.left + options.deltaX) + 'px',
							top: '' + (pos.top + t.height() + offsetY - parseInt(t.css('border-bottom-width'))) + 'px',
							//width: '' + (t.width() + paddingWidth) + 'px',
							width: '' + (t.outerWidth() + paddingWidth) + 'px',
							'display': display
						});
					},

					refresh: function () {

						var ctx = this
						var needle = this.target.value

						if (options.caching && this.cache[needle]) {
							var data = this.cache[needle]
							if (data) {
								options.parseResponse(ctx, data)
								return
							}
						}

						var where = options.getUrl;
						if (typeof where == 'function')
							where = where(needle);
						where.params.requestId = ++ this.requestId;
						$.getJSON(where.url, where.params, function (data) {
							if (data && (data.requestId === undefined || data.requestId >= ctx.requestId)) {
								options.parseResponse(ctx, data)
								ctx.cache[needle] = data
							}
						});
					},

					selectCurrent: function (withoutFocus) {
						if (this.selected >= 0 && this.selected < this.variants.length)
							this.target.value = this.variants[this.selected]
						//this.hide();
						if (!withoutFocus)
							this.target.focus();
					},

					keyup: function (evt) {
						switch(evt.keyCode) {
						case 9: // tab
							this.hide()
							return false
						break;
						case 27: // esc
							this.hide()
							return false
						break;
						case 40: // down
							var i = this.selected + 1
							if (i >= this.variants.length)
								i = this.variants.length - 1
							options.selectItem(this, i)
							this.selectCurrent()
							this.show()
							return false
						break;
						case 38: // up
							var i = this.selected - 1
							if (i < -1)
								i = -1
							options.selectItem(this, i)
							this.selectCurrent()
							this.show()
							return false
						break;
						case 13: // enter
							this.selectCurrent()
							this.cancelEvent(evt)
							return false
						break;
						}
						this.refresh()
						return true
					}
				}

				api.init(e);

				$(e).focusin(function() {
					api.acquire()
				}).focusout(function() {
					api.selectCurrent(true)
					api.hide()
					$.ajp.autocomplete.last = api
				}).keyup(function(evt) {
					api.keyup(evt)
				}).attr('autocomplete', 'off')
			})
		}
	})
})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.autoheight = { version: '0.2pa' }

	$.fn.extend({

		ajp$autoheight: function (options) {

			var defaults = {
				effect: function ($el, newHeight, oldHeight) {
					$el.animate({ height: newHeight + 'px' }, 'slow', 'linear')
				}
			}

			var opts = $.extend(defaults, options);

			function reviewHeight() {
				return this.each(function(i, el) {
					var $el = $(el)
					var currentHeight = $el.outerHeight()
					$el.css({ height: 'auto' })
					var normalHeight = $el.outerHeight()
					$el.css({ height: currentHeight })
					opts.effect($el, normalHeight, currentHeight)
				})
			}

			return reviewHeight.apply(this)
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.bindkeys = { version: '0.13pa' }

	$.fn.extend({

		ajp$bindkeys: function (options) {

			var defaults = {
			}

			var opts = $.extend(defaults, options);

			return this.each(function(i, el) {

				var api = {

					hotKeys: [],

					cancelEvent: function (evt) {
						if (!evt) return;
						evt.cancelBubble = true;
						if (evt.stopPropagation) {
							evt.stopPropagation();
							evt.preventDefault();
						}
					},

					parseHotKey: function (hotKeyData) {
						var hotKey = {
							ctrlKey: false,
							altKey: false,
							shiftKey: false,
							keyCode: 0,
							shortcut: hotKeyData
						}
						var tokens = hotKeyData.toUpperCase().split('+')
						for (var i = 0; i < tokens.length; i ++) {
							var m;
							if (/^CTRL|CONTROL$/.test(tokens[i])) {
								hotKey.ctrlKey = true
							} else if (/^(ENTER|RETURN)$/.test(tokens[i])) {
								hotKey.keyCode = 13
							} else if (/^TAB$/.test(tokens[i])) {
								hotKey.keyCode = "\t".charCodeAt(0)
							} else if (/^BACKSPACE|BS(PC)?$/.test(tokens[i])) {
								hotKey.keyCode = "\b".charCodeAt(0)
							} else if (/^SPACE|SPC$/.test(tokens[i])) {
								hotKey.keyCode = ' '.charCodeAt(0)
							} else if (/^ESC(APE)?$/.test(tokens[i])) {
								hotKey.keyCode = 27
							} else if (/^(PAGE|PG)UP$/.test(tokens[i])) {
								hotKey.keyCode = 33
							} else if (/^(PAGE|PG)D(OW)?N$/.test(tokens[i])) {
								hotKey.keyCode = 34
							} else if (/^HOME$/.test(tokens[i])) {
								hotKey.keyCode = 36
							} else if (/^END$/.test(tokens[i])) {
								hotKey.keyCode = 35
							} else if (/^INS(ERT)?$/.test(tokens[i])) {
								hotKey.keyCode = 45
							} else if (/^DEL(ETE)?$/.test(tokens[i])) {
								hotKey.keyCode = 46
							} else if (/^LEFT$/.test(tokens[i])) {
								hotKey.keyCode = 37
							} else if (/^RIGHT$/.test(tokens[i])) {
								hotKey.keyCode = 39
							} else if (/^D(OW)?N$/.test(tokens[i])) {
								hotKey.keyCode = 40
							} else if (/^UP$/.test(tokens[i])) {
								hotKey.keyCode = 38
							} else if (/^ALT$/.test(tokens[i])) {
								hotKey.altKey = true
							} else if (/^SHI?FT$/.test(tokens[i])) {
								hotKey.shiftKey = true
							} else if ((m = tokens[i].match(/^F(\d+)$/))) {
								hotKey.keyCode = 111 + parseInt(m[1]);
							} else if (tokens[i] == '') {
								hotKey.keyCode = '+'.charCodeAt(0);
							} else {
								hotKey.keyCode = tokens[i].charCodeAt(0);
							}
						}
						return hotKey;
					},

					bindHotKey: function (hotKeyData, handler) {
						var hotKey = this.parseHotKey(hotKeyData);
						if (hotKey.keyCode)
							this.hotKeys.push({ 'hotKey': hotKey, 'handler': handler })
					},

					onkeydown: function (evt) {
						for (var i = 0; i < this.hotKeys.length; i ++) {
							var k = this.hotKeys[i].hotKey;
							if (
								(k.keyCode == evt.keyCode)
								&& (!k.ctrlKey || evt.ctrlKey)
								&& (!k.altKey || evt.altKey)
								&& (!k.shiftKey || evt.shiftKey)
							)
								return this.hotKeys[i].handler(evt, api);
						}
					}
				}

				var defaultCommands = { }

				$(el).keydown(function (evt) { api.onkeydown(evt) });

				for (var key in opts) {
					var cmd = opts[key];
					if (typeof cmd == 'string')
						cmd = defaultCommands[cmd];
					if (cmd)
						api.bindHotKey(key, cmd);
				}
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.checkbox = { version: '0.7pa' }

	$.fn.extend({

		ajp$checkbox: function (options) {

			var defaults = {
				checkboxHeight: 13,
				radioHeight: 13
			}

			var opts = $.extend(defaults, options);

			return this.each(function(i, el) {
				if (el.type == 'checkbox' || el.type == 'radio') {
					var height = (el.type == 'radio' ? opts.radioHeight : opts.checkboxHeight)
					var $span = $('<span class="ajp-checkbox-' + el.type + '"></span>')
					$(el).css('display', 'none')
						.addClass('ajp-checkbox')
						.before($span)
						.change(function () {
							if (el.disabled && !$span.hasClass('ajp-checkbox-disabled'))
								$span.addClass('ajp-checkbox-disabled')
							if (!el.disabled && $span.hasClass('ajp-checkbox-disabled'))
								$span.removeClass('ajp-checkbox-disabled')
							if (el.type == 'radio' && el.name)
								$('input[name=' + el.name + ']').each(function () {
									$(this).prev().css('background-position', '0 ' + (this.checked ? -height * 2 : 0) + 'px')
								})
							$span.css('background-position', '0 ' + (el.checked ? -height * 2 : 0) + 'px')
						})
						.change()
					$span.mousedown(function () {
						if (!el.disabled)
							$(this).css('background-position', '0 -' + (el.checked ? height * 3 : height) + 'px')
					})
					$span.mouseup(function () {
						if (!el.disabled) {
							el.checked = !el.checked
							$(el).change()
						}
					})
				}
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.colorpicker = { version: '0.3pa', required: ['popup'], controls: [], serial: 1 }

	$.fn.extend({

		ajp$colorpicker: function (options) {

			var defaults = {
				action: 'click',
				pallete: [
					['#e6b8af','#f4cccc','#fce5cd','#fff2cc','#d9ead3','#d0e0e3','#c9daf8','#cfe2f3','#d9d2e9','#ead1dc','#dd7e6b','#ea9999','#f9cb9c','#ffe599','#b6d7a8','#a2c4c9','#a4c2f4','#9fc5e8','#b4a7d6','#d5a6bd','#cc4125','#e06666','#f6b26b','#ffd966','#93c47d','#76a5af','#6d9eeb','#6fa8dc','#8e7cc3','#c27ba0','#a61c00','#cc0000','#e69138','#f1c232','#6aa84f','#45818e','#3c78d8','#3d85c6','#674ea7','#a64d79','#85200c','#990000','#b45f06','#bf9000','#38761d','#134f5c','#285bac','#0b5394','#351c75','#741b47','#5b0f00','#660000','#783f04','#7f6000','#274e13','#0c343d','#1c4587','#073763','#20124d','#4c1130'],
					['#000000','#434343','#666666','#999999','#b7b7b7','#cccccc','#d9d9d9','#efefef','#f3f3f3','#ffffff'],
					['#980000','#ff0000','#ff9900','#ffff00','#00ff00','#00ffff','#4a86e8','#0000ff','#9900ff','#ff00ff']
				],
				onchange: function (val, $el) { }
				// show: function ($cp, $el) { $cp.css({ visibility: 'visible' }) }
				// hide: function ($cp, $el) { $cp.css({ visibility: 'hidden' }) }
			}

			var opts = $.extend(defaults, options);

			return this.each(function(i, el) {

				var $el = $(el)
				var $cp = $('<div class="ajp-colorpicker"></div>')

				for (var i = 0; i < opts.pallete.length; i ++) {
					var $p = $('<div class="pallete"></div>')
					var p = opts.pallete[i]
					for (var j = 0; j < p.length; j ++)
						$('<div class="color"></div>').css({ 'background-color': p[j] }).attr('title', p[j]).appendTo($p)
					$('<div class="delimiter"></div>').appendTo($p)
					$p.appendTo($cp)
				}

				$cp.appendTo($el)

				$el.ajp$popup({
					action: opts.action,
					popup: function () { return $cp },
					show: opts.show,
					hide: opts.hide
				})

				$cp.find('.color').click(function (evt) {
					opts.onchange($(this).attr('title'), $el)
				})
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.datepicker = { version: '0.8pa', required: [ 'popup' ] }

	$.fn.extend({

		ajp$datepicker: function (options) {

			var defaults = {

				displayFormat: 'yyyy-mm-dd',
				valueFormat: 'yyyy-mm-dd',
				value: function ($el) { var d = $el.val(); if (!d) d = new Date(); return d },
				show: function ($ctl, $el) {
					$ctl.css({
						visibility: 'visible',
						left: '' + $el.offset().left + 'px',
						top: '' + ($el.offset().top + $el.outerHeight()) + 'px'
					})
				},
				hide: function ($ctl, $el) {
					$ctl.css({
						visibility: 'hidden'
					})
				},
				update: function ($el, $vel, date) {
					$vel.val(formatDate(opts.displayFormat, date))
					$el.val(formatDate(opts.valueFormat, date)).change()
				},

				months: [ 'Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь' ],
				monthsFmt: [ 'Января', 'Февраля', 'Марта', 'Апреля', 'Мая', 'Июня', 'Июля', 'Августа', 'Сентября', 'Октября', 'Ноября', 'Декабря' ],
				monthsShort: [ 'Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек' ],
				days: [ 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс' ]
			}

			var opts = $.extend(defaults, options)

			function indexOf(v) {
				for(var i = 0; i < this.length; i++)
					if (this[i] == v)
						return i
				return -1
			}

			if ($.browser.msie && !opts.months.indexOf)
				Array.prototype.indexOf = indexOf

			function formatDate(fmt, date) {
				var dateformat = {
					'd': function (d) { return d.getDate() },
					'dd': function (d) { var r = d.getDate(); return (r < 10 ? '0' + r : r) },
					'm': function (d) { return d.getMonth() + 1 },
					'mm': function (d) { var r = d.getMonth() + 1; return (r < 10 ? '0' + r : r) },
					'mmm': function (d) { return opts.monthsShort[d.getMonth()] },
					'mmmm': function (d) { return opts.monthsFmt[d.getMonth()] },
					'yy': function (d) { var r = d.getYear() - ($.browser.msie ? 2000 : 100); return (r < 10 ? '0' + r : r) },
					'yyyy': function (d) { return d.getYear() + ($.browser.msie ? 0 : 1900) }
				}
				var res = ''
				while (fmt.length > 0) {
					var m = fmt.match(/^(yyyy|yy|mmmm|mmm|mm|m|dd|d)(.*)$/, fmt)
					if (m) {
						res += dateformat[m[1]](date)
						fmt = m[2]
					} else {
						res += fmt.charAt(0)
						fmt = fmt.substr(1)
					}
				}
				return res
			}

			function parseDate(fmt, s) {
				function pInt(v) { return parseInt(v.replace(/^0+/, '')) }
				function pYear(v) { return pInt(v) + 2000 }
				function pMonthShort(v) { return opts.monthsShort.indexOf(v) + 1 }
				function pMonth(v) { return opts.monthsFmt.indexOf(v) + 1 }
				function parser(rx, d, fld, p) {
					var m = (typeof d.src == 'string' ? d.src : '').match(rx)
					d.src = (m ? m[2] : '')
					d[fld] = (m ? p(m[1]) : 0)
				}
				var dateformat = {
					'd': function (d) { parser(/^(\d\d?)(.*)/, d, 'day', pInt) },
					'dd': function (d) { parser(/^(\d\d)(.*)/, d, 'day', pInt) },
					'm': function (d) { parser(/^(\d\d?)(.*)/, d, 'month', pInt) },
					'mm': function (d) { parser(/^(\d\d)(.*)/, d, 'month', pInt) },
					'mmm': function (d) { parser(/^(...)(.*)/, d, 'month', pMonthShort) },
					'mmmm': function (d) { parser(new RegExp('^(' + opts.monthsFmt.join('|') + ')(.*)'), d, 'month', pMonth) },
					'yy': function (d) { parser(/^(\d\d)(.*)/, d, 'year', pYear) },
					'yyyy': function (d) { parser(/^(\d\d\d\d)(.*)/, d, 'year', pInt) }
				}
				var d = { src: s }
				while (fmt.length > 0) {
					var m = fmt.match(/^(yyyy|yy|mmmm|mmm|mm|m|dd|d)(.*)$/, fmt)
					if (m) {
						dateformat[m[1]](d)
						fmt = m[2]
					} else {
						d.src = d.src.substr(1)
						fmt = fmt.substr(1)
					}
				}
				return d
			}

			return this.each(function(i, el) {

				var $el = $(el)
				var yearShift = ($.browser.msie ? 0 : 1900)

				var $vel = $('<input type="' + $el.attr('type') + '"/>').attr('readonly', true)

				var attrs = ['class', 'title']
				for (var a = 0; a < attrs.length; a ++) {
					var attr = $el.attr(attrs[a])
					if (attr) $vel.attr(attrs[a], attr)
				}

				$el.after($vel)
				$el.css('display', 'none')

				var $control = $( ''
					+ '<div class="ajp-datepicker">'
						+ '<table class="ajp-datepicker-header"><tr>'
							+ '<td class="ajp-datepicker-prev"></td>'
							+ '<td class="ajp-datepicker-month-name"></td>'
							+ '<td class="ajp-datepicker-next"></td>'
						+ '</tr></table>'
						+ '<table class="ajp-datepicker-month">'
							+ '<tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr>'
						+ '</table>'
						+ '<div class="ajp-datepicker-footer">'
							+ '<div class="ajp-datepicker-clear"></div>'
						+ '</div>'
					+ '</div>'
				).css({
					visibility: 'hidden',
					position: 'absolute'
				})

				$control.find('.ajp-datepicker-month > tbody > tr > th').each(function (day) {
					$(this).text(opts.days[day])
				})

				$('body').append($control)

				$vel.ajp$popup({
					action: 'click',
					popup: function () { return $control },
					show: opts.show,
					hide: opts.hide
				})

				var $popupContext = $vel.ajp$popupContext()

				function getSelectedDate() {
					var d = (typeof opts.value == 'function' ? opts.value($el) : opts.value)
					if (typeof d == 'object' && d instanceof Date)
						return d
					d = parseDate(opts.valueFormat, d)
					return new Date(d.year, d.month - 1, d.day)
				}

				function visualize(date) {
					var sdate = getSelectedDate()
					$control.find('.ajp-datepicker-month-name').text('' + opts.months[date.getMonth()] + ', ' + (date.getYear() + yearShift))
					$control.find('.ajp-datepicker-month > tbody > tr').each(function (tr) { if (tr) $(this).remove() })
					var now = new Date()
					now = new Date(now.getYear() + yearShift, now.getMonth(), now.getDate())
					var wdays = [ 6, 0, 1, 2, 3, 4, 5 ]
					var lastDay = new Date(date.getYear() + yearShift, date.getMonth() + 1, 0).getDate()
					var $tr = false
					for (var day = 1; day <= lastDay; day ++) {
						var wday = wdays[new Date(date.getYear() + yearShift, date.getMonth(), day).getDay()]
						if (!$tr) $tr = $('<tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr>')
						var cdate = new Date(date.getYear() + yearShift, date.getMonth(), day)
						var $td = $tr.find('td:eq(' + wday + ')').text(day).data('date', cdate)
						if (cdate.getTime() == sdate.getTime())
							$td.addClass('selected')
						if (cdate.getTime() == now.getTime())
							$td.addClass('now')
						if (wday == 6) {
							$control.find('.ajp-datepicker-month > tbody > tr:last').after($tr)
							$tr = false
						}
					}
					if ($tr) $control.find('.ajp-datepicker-month > tbody > tr:last').after($tr)
					$control.data('visualized-date', date)
					$control.find('.ajp-datepicker-month > tbody > tr > td').click(function () {
						if ($(this).text()) {
							opts.update($el, $vel, new Date($(this).data('date')))
							$popupContext.hide()
						}
					})
				}

				$control.find('.ajp-datepicker-prev').mouseup(function (evt) {
					$control.data('ajp-popup-opening', true)

					var date = new Date($control.data('visualized-date'))
					date = new Date(date.getYear() + yearShift, date.getMonth() - 1, 1)
					visualize(date)
				})

				$control.find('.ajp-datepicker-next').mouseup(function (evt) {
					$control.data('ajp-popup-opening', true)

					var date = new Date($control.data('visualized-date'))
					date = new Date(date.getYear() + yearShift, date.getMonth() + 1, 1)
					visualize(date)
				})

				$control.find('.ajp-datepicker-clear').mouseup(function (evt) {
					$vel.val('')
					$el.val('').change()
				})

				visualize(getSelectedDate())

				if ($el.val())
					opts.update($(), $vel, getSelectedDate())
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.dragndrop = { version: '0.10pa' }

	$.fn.extend({

		ajp$dragout: function (options) {

			var defaults = {
				downloadurl: 'downloadurl'
			}

			var options = $.extend(defaults, options)

			this.each(function (i, el) {
				el.addEventListener('dragstart', function(evt) {
					var url = (typeof options.downloadurl == 'function' ? options.downloadurl(el) : $(el).data(options.downloadurl))
					evt.dataTransfer.setData('DownloadURL', url);
				}, false)
			})
		},

		ajp$dragndrop: function (options) {

			var defaults = {

				getUploadUrl: function (file, el) { return './upload/?name=' + encodeURIComponent(file.fileName) },

				onload: function (file, el, xhr) { },
				ondrop: function (obj, type, api) {
					if (type == 'file')
						api.uploadFile(obj);
				}
			}

			var options = $.extend(defaults, options);

			return this.each(function(i, el) {

				var api = {

					element: el,

					cancelEvent: function (evt) {
						if (!evt) return;
						evt.cancelBubble = true;
						if (evt.stopPropagation) {
							evt.stopPropagation();
							evt.preventDefault();
						}
					},

					matchDataTransferType: function (types, type) {
						if (types.contains)
							return types.contains(type);
						return new RegExp("\\b" + type + "\\b").test('' + types);
					},

					uploadFile: function (file) {
						var xhr = new XMLHttpRequest();
						xhr.onreadystatechange = function() {
							var request = xhr;
							if (request.readyState == 4 && request.status == 200)
								options.onload(file, el, request)
						}
						xhr.open('POST', options.getUploadUrl(file, el));
						xhr.send(file);
					}
				}

				if (!/explorer/i.test(navigator.appName)) {

					el.addEventListener('dragenter', function(evt) { api.cancelEvent(evt) }, false);
					el.addEventListener('dragover', function(evt) { api.cancelEvent(evt) }, false);
					el.addEventListener('drop', function (evt) {

						var dt = evt.dataTransfer;

						evt.stopPropagation();
						evt.preventDefault();

						if (api.matchDataTransferType(dt.types, 'Files')) {
							for (var i = 0; i < dt.files.length; i++)
								api.uploadFile(dt.files[i]);
						} else if (api.matchDataTransferType(dt.types, 'text/uri-list')) { // URL
							var u = dt.getData('URL');
							if (/(je?pg|png|gif|bmp)$/i.test(u)) {
								options.ondrop(u, 'image', api)
							} else {
								options.ondrop(u, 'url', api)
							}
						}

					}, false);
				}
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

if (!$.ajp) $.ajp = { };
$.ajp.easing = { version: '0.1pa' };

$.easing['ajp-easing'] = function(x, t, b, c, d) {
	x = 1 - x
	return c * Math.sqrt(1 - x * x) + b
};

$.easing['ajp-elastic'] = function(x, t, b, c, d) {

	var c1 = c + (c - b) * 0.26
	var c2 = b + (c - b) * 0.87
	var c3 = c + (c - b) * 0.06
	var c4 = b + (c - b) * 0.96

	var n5 = d
	var n4 = n5 - (d / 4) / 2
	var n3 = n4 - (d / 4) / 2
	var n2 = n3 - (d / 4)
	var n1 = n2 - (d / 4)

	if (t < n1) {
		c = c1
		return b + (c - b) * (t / n1)
	}

	if (t < n2) {
		b = c1
		c = c2
		return b + (c - b) * ((t - n1) / (n2 - n1))
	}

	if (t < n3) {
		b = c2
		c = c3
		return b + (c - b) * ((t - n2) / (n3 - n2))
	}

	if (t < n4) {
		b = c3
		c = c4
		return b + (c - b) * ((t - n3) / (n4 - n3))
	}

	if (t < n5) {
		b = c4
		return b + (c - b) * ((t - n4) / (n5 - n4))
	}

	return c
};

$.easing['ajp-bounce'] = function(x, t, b, c, d) {

	var c1 = b + (c - b) * 0.74
	var c2 = b + (c - b) * 0.96

	var n5 = d
	var n4 = n5 - (d / 4) / 2
	var n3 = n4 - (d / 4) / 2
	var n2 = n3 - (d / 4)
	var n1 = n2 - (d / 4)

	if (t < n1)
		return b + (c - b) * (t / n1)

	if (t < n2) {
		b = c
		c = c1
		return b + (c - b) * ((t - n1) / (n2 - n1))
	}

	if (t < n3) {
		b = c1
		return b + (c - b) * ((t - n2) / (n3 - n2))
	}

	if (t < n4) {
		b = c
		c = c2
		return b + (c - b) * ((t - n3) / (n4 - n3))
	}

	if (t < n5) {
		b = c2
		return b + (c - b) * ((t - n4) / (n5 - n4))
	}

	return c
};
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.editable = { version: '0.19pa', required: ['bindkeys'], editors: { }, installed: false }

	$.fn.extend({

		ajp$uneditable: function (options) {

			var defaults = {
				uneditable: function (api) {}
			}

			var options = $.extend(defaults, options);

			$(this).each(function (i, el) {
				var id = $(el).attr('id');
				if (id && $.ajp.editable.editors[id]) {
					$(el).attr('contentEditable', false)
					options.uneditable($.ajp.editable.editors[id])
				}
			})
		},

		ajp$editableContext: function () {
			var id = this.attr('id');
			if (id)
				return $.ajp.editable.editors[id]
			return null
		},

		ajp$editable: function (options) {

			var defaults = {

				hotkeys: {

					'Ctrl+b': 'bold',
					'Ctrl+s': 'strikethrough',
					'Ctrl+i': 'italic',
					'Ctrl+u': 'underline',

					'Ctrl+1': 'h1',
					'Ctrl+2': 'h2',
					'Ctrl+3': 'h3',
					'Ctrl+4': 'h4',
					'Ctrl+5': 'h5',
					'Ctrl+6': 'h6',

					'Ctrl+r': 'text',
					'Ctrl+l': 'anchor'
				},

				anchorDialog: function (callback) {
					var url = prompt('URL', 'http://')
					if (url) {
						callback({
							'url': url,
							'attrs': {
								'rel': 'nofollow',
								'target': '_blank'
							}
						})
					}
				},

				imageDialog: function (callback) {
					var url = prompt('Image URL', 'http://')
					if (url) {
						callback({
							'url': url,
							'attrs': {
								'alt': '',
								'title': ''
							}
						})
					}
				},

				init: function (el, api) {}
			}

			var options = $.extend(defaults, options);

			var randomId = function (prefix, n) {
				var a = 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890'
				var id = prefix;
				for (var i = 0; i < n; i ++)
					id += a.charAt(parseInt(a.length * Math.random()))
				return id;
			}

			return this.each(function(i, el) {

				var api = {

					element: el,
					codeArea: null,

					original: el.innerHTML,

					cancelEvent: function (evt) {
						if (!evt) return;
						evt.cancelBubble = true;
						if (evt.stopPropagation) {
							evt.stopPropagation();
							evt.preventDefault();
						}
					},

					range: null,

					saveSelection: function() {
						try {
							this.range = (window.getSelection ? window.getSelection().getRangeAt(0) : document.selection.createRange())
						} catch (ex) {
						}
					},

					restoreSelection: function() {
						if (!this.range)
							return;
						if (window.getSelection) {
							var sel = window.getSelection();
							if (sel.rangeCount > 0) 
								sel.removeAllRanges();
							sel.addRange(this.range);
						} else if (document.selection) {
							this.range.select();
						}
					},

					getSelectedHtml: function () {
						var userSelection;
						if (window.getSelection) {
							// W3C Ranges
							userSelection = window.getSelection();
							// Get the range:
							if (userSelection.getRangeAt)
								var range = userSelection.getRangeAt(0);
							else {
								var range = document.createRange();
								range.setStart(userSelection.anchorNode, userSelection.anchorOffset);
								range.setEnd(userSelection.focusNode, userSelection.focusOffset);
							}
							// And the HTML:
							var clonedSelection = range.cloneContents();
							var div = document.createElement('div');
							div.appendChild(clonedSelection);
							return div.innerHTML;
						} else if (document.selection) {
							// Explorer selection, return the HTML
							userSelection = document.selection.createRange();
							return userSelection.htmlText;
						} else {
							return '';
						}
					},

					selectNode: function (node) {
						var range = document.createRange();
						range.selectNode(node);
						var selection = window.getSelection();
						selection.removeAllRanges();
						selection.addRange(range);
					},

					replaceSelection: function (html) {
						if (/explorer/i.test(navigator.appName)) {
							var range = document.selection.createRange()
							range.pasteHTML(html)
						} else {
							var node = $(html)[0]
							var selection = window.getSelection();
							var range = selection.getRangeAt(0);
							range.deleteContents();
							range.insertNode(node);
							api.selectNode(node);
						}
					},

					createImage: function (url) {
						if (!url) return;
						this.replaceSelection('<img src="' + url + '"/>')
					},

					createAnchor: function (url) {
						if (!url) return;
						this.replaceSelection('<a href="' + url + '">' + this.getSelectedHtml() + '</a>');
					},

					pasteHtml: function (html) {
						if (/explorer/i.test(navigator.appName)) {
							var range = document.selection.createRange()
							range.pasteHTML('<span class="editable-not-initialized">' + html + '</span>');
							options.init(
								$(el).find('span.editable-not-initialized')
								.removeClass('editable-not-initialized')[0],
								this
							)
						} else {
							var node = document.createElement('span');
							node.innerHTML = html;
							options.init(node, this);
							var selection = window.getSelection();
							var range = selection.getRangeAt(0);
							range.deleteContents();
							range.insertNode(node);
							this.selectNode(node);
						}
					}
				}

				var helpers = {

					wrap: function (evt, ctx, s, e) {
						ctx.cancelEvent(evt)
						evt.returnValue = false
						ctx.replaceSelection(s + ctx.getSelectedHtml() + e)
						return false
					},

					list: function (evt, api, s, e) {

						api.cancelEvent(evt);
						evt.returnValue = false;
				
						var list = s
						var $node = $('<div>' + api.getSelectedHtml() + '</div>')
						var $items = $node.children('div, p')
						$items.each(function () { list += '<li>' + $(this).html() + '</li>' })
						list += e

						api.replaceSelection(list)

						return false;
					},

					align: function (evt, api, a) {

						api.cancelEvent(evt);
						evt.returnValue = false;

						var html = api.getSelectedHtml()
						html = html.replace(/text-align\:\s*(left|center|right|justify)\s*\;?/gi, '')
						api.replaceSelection('<div style="text-align: '+ a + ';">' + html + '</div>')

						return false;
					},

					gc: function (api) {

						var $el = $(api.element)

						$el.find('span').each(function () {
							var $span = $(this);
							if ($span.text() == '')
							$span.remove()
						})
						
					}
				}

				var defaultCommands = {

					h1: function (evt, ctx) {
						return helpers.wrap(evt, ctx, '<h1>', '</h1>')
					},

					h2: function (evt, ctx) {
						return helpers.wrap(evt, ctx, '<h2>', '</h2>')
					},

					h3: function (evt, ctx) {
						return helpers.wrap(evt, ctx, '<h3>', '</h3>')
					},

					h4: function (evt, ctx) {
						return helpers.wrap(evt, ctx, '<h4>', '</h4>')
					},

					h5: function (evt, ctx) {
						return helpers.wrap(evt, ctx, '<h5>', '</h5>')
					},

					h6: function (evt, ctx) {
						return helpers.wrap(evt, ctx, '<h6>', '</h6>')
					},

					bold: function (evt, ctx) {
						return helpers.wrap(evt, ctx, '<b>', '</b>')
					},

					italic: function (evt, ctx) {
						return helpers.wrap(evt, ctx, '<i>', '</i>')
					},

					underline: function (evt, ctx) {
						return helpers.wrap(evt, ctx, '<u>', '</u>')
					},

					strikethrough: function (evt, ctx) {
						return helpers.wrap(evt, ctx, '<span style="text-decoration: line-through;">', '</span>')
					},

					small: function (evt, ctx) {
						return helpers.wrap(evt, ctx, '<small>', '</small>')
					},

					sub: function (evt, ctx) {
						return helpers.wrap(evt, ctx, '<sub>', '</sub>')
					},

					sup: function (evt, ctx) {
						return helpers.wrap(evt, ctx, '<sup>', '</sup>')
					},

					blockquote: function (evt, ctx) {
						return helpers.wrap(evt, ctx, '<blockquote>', '</blockquote>')
					},

					code: function (evt, ctx) {
						return helpers.wrap(evt, ctx, '<code>', '</code>')
					},

					quote: function (evt, ctx) {
						return helpers.wrap(evt, ctx, '<q>', '</q>')
					},

					ul: function (evt, ctx) {
						return helpers.list(evt, ctx, '<ul>', '</ul>')
					},

					ol: function (evt, ctx) {
						return helpers.list(evt, ctx, '<ol>', '</ol>')
					},

					left: function (evt, ctx) {
						return helpers.align(evt, ctx, 'left')
					},

					center: function (evt, ctx) {
						return helpers.align(evt, ctx, 'center')
					},

					right: function (evt, ctx) {
						return helpers.align(evt, ctx, 'right')
					},

					justify: function (evt, ctx) {
						return helpers.align(evt, ctx, 'justify')
					},

					text: function (evt, api) {

						api.cancelEvent(evt);
						evt.returnValue = false;

						var html = api.getSelectedHtml()
						var text = html.replace(/\<[^\>]*\>/g, '')
						api.replaceSelection('<span>' + text + '</span>')

						helpers.gc(api)

						return false;
					},

					anchor: function (evt, api) {

						api.cancelEvent(evt);
						evt.returnValue = false;

						options.anchorDialog(function (params) {
							api.createAnchor(params.url, api.getSelectedHtml());
						})

						return false;
					},

					image: function (evt, api) {

						api.cancelEvent(evt);
						evt.returnValue = false;

						options.imageDialog(function (params) {
							api.createImage(params.url, api.getSelectedHtml());
						})

						return false;
					},

					codemode: function (evt, ctx) {

						var $el = $(ctx.element)
						var $cm = ctx.codeArea

						if ($el.css('display') == 'none') {

							$el.html($cm.val())

							$el.width($cm.width())
							$el.height($cm.height())
							$cm.css({ display: 'none' })
							$el.css({ display: 'block' }).focus()

						} else {

							$cm.val($el.html())

							$cm.width($el.width())
							$cm.height($el.height())
							$el.css({ display: 'none' })
							$cm.css({ display: 'block' }).focus()
						}

						return false
					}
				}

				api.get = function () {
					var $el = $(this.element)
					var $cm = this.codeArea
					return ($el.css('display') == 'none' ? $cm.val() : $el.html());
				}

				api.set = function (val) {
					var $el = $(this.element)
					var $cm = this.codeArea
					if ($el.css('display') == 'none') {
						$cm.val(val)
					} else {
						$el.html(val)
					}
				}

				api.execCommand = function (name) {
					return defaultCommands[name]({ }, this)
				}

				api.codeArea = $('<textarea></textarea>').addClass('ajp-editable-codemode').css({ display: 'none' })
				$(el).attr('contentEditable', true).before(api.codeArea)

				var hotkeysToBind = {}
				$.each(options.hotkeys, function (key, cmd) {
					if (typeof cmd == 'string')
						cmd = defaultCommands[cmd];
					if (typeof cmd == 'function')
						hotkeysToBind[key] = function (evt) {
							if (!el.contentEditable)
								return;
							cmd(evt, api)
						}
				})
				$(el).ajp$bindkeys(hotkeysToBind)

				if (!el.id)
					el.id = randomId('editable-autogenerated-id-', 16);
				$.ajp.editable.editors[el.id] = api;
				api.codeArea.addClass(el.id)

				options.init(el, api)
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.menu = { version: '0.10pa', current: null }

	$.fn.extend({

		ajp$menu: function (options) {

			var defaults = {
				show: function ($ul) {
					$ul.parents('li:eq(0)').addClass('selected')
					if ($.browser.msie) {
						$ul.css({ display: 'block' })
					} else {
						$ul.find('.arrow').css({ display: 'none' })
						$ul.css({ opacity: 0, display: 'block' })
					}
					if (!$ul.data('initial-width'))
						$ul.data('initial-width', $ul.width())
					var $root = $ul.parents('.ajp-menu')
					if ($ul.offset().left + $ul.outerWidth()  >  $root.offset().left + $root.outerWidth())
						$ul.css('margin-left', '-' + $ul.css('margin-left'))
					if (!$.browser.msie) {
						$ul.css({ width: 0 }).animate({ opacity: 1, width: $ul.data('initial-width') }, 'fast', 'swing', function () {
							$ul.find('.arrow').css({ opacity: 0, display: 'block' }).animate({ opacity: 1 }, 'fast', 'swing')
						})
					}
				},
				hide: function ($ul) {
					$ul.find('li').removeClass('selected')
					$ul.parents('li:eq(0)').removeClass('selected')
					if ($.browser.msie) {
						$ul.css('display', 'none')
					} else {
						$ul.animate({ opacity: 0 }, 'fast', 'swing', function () {
							$ul.css('display', 'none')
						})
					}
				}
			}

			var opts = $.extend(defaults, options);

			function makeMenu($li, level) {

				var $a = $li.children('a:eq(0)')
				var $ul = $li.children('ul:eq(0)')
				var hasSubmenu = ($ul.length ? true : false)
				
				if ($li.hasClass('disabled'))
					$a.removeAttr('href').mousedown(function (evt) {
						evt.preventDefault()
						return false
					})

				if (hasSubmenu) {

					function closeSubmenu() {
						if ($ul.css('display') != 'none')
							opts.hide($ul)
					}

					$('body').click(function () {
						closeSubmenu()
					}).keydown(function (evt) {
						if (evt.keyCode == 27)
							closeSubmenu()
					})

					if (level && $a.find('.arrow:eq(0)').length == 0)
						$a.append('<span class="arrow">&raquo;</span>')

					$li.bind('click', function (evt) {
						if ($(this).hasClass('disabled'))
							return
						var vis = ($ul.css('display') == 'none' ? true : false)
						$li.parent().children('li').children('ul').each(function () {
							if ($(this).css('display') != 'none')
								opts.hide($(this))
						})
						$ul.find('ul').css('display', 'none')
						if (level && vis) {

							$ul.css({
								'margin-top': '-' + ($li.outerHeight() - parseInt($li.css('padding-top'))) + 'px',
								'margin-left': '' + ($li.outerWidth() - parseInt($li.css('padding-left'))) + 'px'
							})
						}
						if (vis) {
							opts.show($ul)
							evt.preventDefault()
							return false
						} else {
							opts.hide($ul)
						}
					})

					$ul.children('li').each(function () {
						makeMenu($(this), level + 1)
					})

				} else {

					if ($a.length > 0 && $a[0].href == window.location.href && !$li.hasClass('selected'))
						$li.addClass('selected')					

					if (!$a.hasClass('final-node'))
						$a.addClass('final-node')
				}
			}

			return this.each(function() {
				$(this).removeClass('ajp-menu-noscript').addClass('ajp-menu').children('li').each(function () {
					makeMenu($(this), 0)
				})
				if (!$(this).children('li.clear').length)
					$(this).append('<li class="clear"></li>')
			})
		}
	})

})(jQuery);
/*
 * $Id$
 *
 * Fork of version 3.0.4 (Author of original - Brandon Aaron http://brandonaaron.net)
 *
 * Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers.
 * Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix.
 * Thanks to: Seamus Leahy for adding deltaX and deltaY
 * 
 * Licensed under the MIT License (LICENSE.txt).
 * 
 */

(function($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.mousewheel = { version: '0.2a' }

	function handler(event) {

		var orgEvent = event || window.event,
			args = [].slice.call( arguments, 1 ),
			delta = 0, returnValue = true,
			deltaX = 0,
			deltaY = 0;

		event = $.event.fix(orgEvent)
		event.type = 'mousewheel'

		if (orgEvent.wheelDelta) {
			delta = orgEvent.wheelDelta/120
		} else if (orgEvent.detail) {
			delta = -orgEvent.detail/3
		}

		deltaY = delta

		if (orgEvent.wheelDeltaY !== undefined) { deltaY = orgEvent.wheelDeltaY / 120 }
		if (orgEvent.wheelDeltaX !== undefined) { deltaX = -1 * orgEvent.wheelDeltaX / 120 }

		event.delta = delta
		event.wheelDeltaX = deltaX
		event.wheelDeltaY = deltaY

		// Add event and delta to the front of the arguments
		args.unshift(event, delta, deltaX, deltaY);
    
		return $.event.handle.apply(this, args);
	}

	$.event.special.mousewheel = {

		setup: function() {
			if (this.addEventListener) {
				this.addEventListener('DOMMouseScroll', handler, false)
				this.addEventListener('mousewheel', handler, false)
			} else {
				this.onmousewheel = handler
			}
		},
    
		teardown: function() {
			if (this.removeEventListener) {
				this.removeEventListener('DOMMouseScroll', handler, false)
				this.removeEventListener('mousewheel', handler, false)
			} else {
				this.onmousewheel = null
			}
		}
	}

	$.fn.extend({

		mousewheel: function (fn) {
			return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel")
		},

		unmousewheel: function (fn) {
			return this.unbind("mousewheel", fn)
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.msgbox = { version: '0.6pa', queue: [] }

	$.fn.extend({

		ajp$msgbox: function (text, options, handler) {

			var defaults = {
				type: 'info', // alert | confirm | info | error | prompt | none
				buttons: [
					{ value: 'OK' }
				],
				inputs: [
					{ type: 'text' }
				],
				background: '#000',
				opacity: 0.5,
				setIcon: function ($msgbox, icon) { $msgbox.find('.icon').addClass(icon) },
				setText: function ($msgbox, html) { $msgbox.find('.text').html(html) },
				addButton: function ($msgbox, $btn) { $msgbox.find('.buttons').append($btn) },
				classes: '',
				template: function (opts) { return $(''
					+ '<div class="ajp-msgbox ' + opts.classes + '">'
						+ '<div class="top"></div>'
						+ '<div class="middle">'
							+ '<div class="icon"></div>'
							+ '<div class="text"></div>'
							+ '<div class="clear"></div>'
						+ '</div>'
						+ '<div class="bottom">'
							+ '<div class="buttons"></div>'
						+ '</div>'
					+ '</div>'
					)
				},
				show: function ($msgbox, $shade) {
					$shade.css({ visibility: 'visible' })
					$msgbox.css({
						'margin-top': '-' + parseInt($msgbox.outerHeight() + parseInt(screen.height)).toString() + 'px',
						'margin-left': '-' + parseInt($msgbox.outerWidth() / 2).toString() + 'px',
						visibility: 'visible'
					})
					$msgbox.find('.text:eq(0) > .input:eq(0) > input:eq(0)').focus()
					$msgbox.animate({
						'margin-top': '-' + parseInt($msgbox.outerHeight() / 2).toString() + 'px'
					}, 'fast', 'swing')
				},
				notReady: function ($msgbox) {
					var d = 20
					$msgbox.css({
						'margin-left': '-' + parseInt($msgbox.outerWidth() / 2 - d).toString() + 'px',
						visibility: 'visible'
					}).animate({
						'margin-left': '-' + parseInt($msgbox.outerWidth() / 2 + d).toString() + 'px'
					}, 'fast', 'swing').animate({
						'margin-left': '-' + parseInt($msgbox.outerWidth() / 2 - d).toString() + 'px'
					}, 'fast', 'swing').animate({
						'margin-left': '-' + parseInt($msgbox.outerWidth() / 2).toString() + 'px'
					}, 'fast', 'swing')
				},
				hide: function ($msgbox, $shade) {
					$msgbox.css({ visibility: 'hidden' })
					$shade.css({ visibility: 'hidden' })
				}
			}

			var buttonDefaults = {
				type: 'submit', // submit | cancel
				value: 'OK'
			}

			var inputDefaults = {
				type: 'text',
				label: '',
				value: '',
				required: false
			}

			var opts = $.extend(defaults, options);

			if (!$.ajp.msgbox.shade) {
				$.ajp.msgbox.shade = $('<div class="ajp-msgbox-shade"></div>').css({
					background: opts.background,
					position: 'fixed',
					left: '0',
					top: '0',
					width: '100%',
					height: '100%',
					opacity: opts.opacity,
					visibility: 'hidden'
				})
				$.ajp.msgbox.shade.appendTo('body')
			}

			var $tmpl = (typeof opts.template == 'function' ? opts.template(opts) : $(opts.template))
			$tmpl.data('ajp-msgbox-type', opts.type)
			opts.setIcon($tmpl, opts.type)
			if (opts.type == 'prompt') {
				$.each(opts.inputs, function () {
					var inp = $.extend(inputDefaults, this)
					text += (inp.label ? '<div class="label">' + inp.label + '</div>' : '')
						+ '<div class="input"><input type="' + inp.type + '" data-ajp-msgbox-required="' + (inp.required ? 'true' : 'false') + '" value="' + (inp.value.replace(/"/g, '&quot;')) + '"/></div>'
				})
			}
			opts.setText($tmpl, text)
			$.each(opts.buttons, function () {
				var btn = $.extend(buttonDefaults, this)
				var $btn = $('<button data-ajp-msgbox-type="' + btn.type + '"></button>').text(btn.value).click(function () {
					var res = []
					var $t = $.ajp.msgbox.queue.pop()
					var canceled = false
					var ready = true
					if ($tmpl.data('ajp-msgbox-type') == 'prompt') {
						var $empty = null
						$tmpl.find('.text > .input > input').each(function () {
							var $inp = $(this)
							var val = $inp.val()
							if (/^true$/i.test($inp.data('ajp-msgbox-required')) && val == '') {
								ready = false
								if (!$empty)
									$empty = $inp
							} else {
								res.push(val)
							}
						})
						if (/^cancel$/i.test($(this).data('ajp-msgbox-type'))) {
							ready = true
							canceled = true
						} else {
							if (ready == false && $empty)
								$empty.focus()
						}
					}
					if (ready) {
						opts.hide($tmpl, $.ajp.msgbox.shade)
						if (!canceled) {
							if (handler) {
								res.unshift($btn.text())
								handler.apply(handler, res)
							}
						} else {
							handler.apply(handler, [ false ])
						}
						$tmpl.remove()
						if ($.ajp.msgbox.queue.length >= 1)
							opts.show($.ajp.msgbox.queue[$.ajp.msgbox.queue.length - 1], $.ajp.msgbox.shade)
					} else {
						opts.notReady($tmpl)
					}
				})
				opts.addButton($tmpl, $btn)
			})
			$tmpl.css({ position: 'fixed', top: '50%', left: '50%', visibility: 'hidden' }).appendTo('body')

			$.ajp.msgbox.queue.unshift($tmpl)
			if ($.ajp.msgbox.queue.length == 1)
				opts.show($.ajp.msgbox.queue[0], $.ajp.msgbox.shade)
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.paginator = { version: '0.4pa', required: ['scrollable'] }

	$.fn.extend({

		ajp$paginator: function (options) {

			var defaults = {
				current: 1,
				portion: 5,
				total: 10,
				baseUrl: './?page=%page%',

				duration: 'fast',
				easing: 'linear',
				mousewheel: false,
				orientation: 'horizontal',
				prev: 'prev',
				next: 'next'
			}

			var options = $.extend(defaults, options);

			return this.each(function(i, el) {
				var currentItem = 0;
				var html = ''
				+ '<a class="prev' + (options.current > 1 ? '" href="' + options.baseUrl.replace(/\%page\%/g, options.current - 1) + '"' : ' disabled"') + '>' + options.prev + '</a>'
				+ '<div class="ajp-scrollable">'
				+ '	<ul>'
				for (var p = 1, i = 0; p <= options.total; i ++) {
					html += '<li>'
					for (var j = 0; j < options.portion; p ++, j ++) {
						html += '<a href="' + options.baseUrl.replace(/\%page\%/g, p) + '"' + (p == options.current ? ' class="selected"' : (p > options.total ? ' class="disabled"' : '')) + '>' + p + '</a>'
						if (p == options.current)
							currentItem = i
					}
					html += '</li>'
				}
				html += ''
				+ '	</ul>'
				+ '</div>'
				+ '<a class="next' + (options.current < options.total ? '" href="' + options.baseUrl.replace(/\%page\%/g, options.current + 1) + '"' : ' disabled"') + '>' + options.next + '</a>'
				$(el).html(html).ajp$scrollable({
					duration: options.duration,
					easing: options.easing,
					mousewheel: options.mousewheel,
					orientation: options.orientation,
					prev: '.prev',
					next: '.next',
					current: currentItem
				})
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.placeholder = { version: '0.7pa', installed: false }

	$.fn.extend({

		ajp$placeholder: function (options) {

			var defaults = {
			}

			var opts = $.extend(defaults, options);

			if (!$.ajp.placeholder.installed) {
				var savedVal = $.fn.val
				$.fn.val = function (value) {
					if (value === undefined)
						return ($(this).hasClass('ajp-placeholder') ? '' : savedVal.apply(this, arguments))
					if ($(this).hasClass('ajp-placeholder') && value != $(this).data('ajp-placeholder'))
						$(this).removeClass('ajp-placeholder')
					return savedVal.apply(this, arguments)
				}
				$.ajp.placeholder.installed = true
			}

			return this.each(function () {

				var $el = $(this)
				var info = ($el.attr('placeholder') ? $el.attr('placeholder') : $el.data('ajp-placeholder'))

				$el.removeAttr('placeholder')
				$el.data('ajp-placeholder', info)
				$el.val(info)

				if (!$el.hasClass('ajp-placeholder'))
					$el.addClass('ajp-placeholder')

			}).focusin(function () {

				var $el = $(this)
				var info = $el.data('ajp-placeholder')

				if ($el.hasClass('ajp-placeholder') && this.value == info) {
					this.value = ''
					$el.removeClass('ajp-placeholder')
					if (!$el.attr('title')) {
						$el.attr('title', info)
						$el.data('ajp-placeholder-title', 1)
					}
				}

			}).focusout(function () {

				var $el = $(this)

				if (this.value == '') {
					var info = $el.data('ajp-placeholder')
					$el.addClass('ajp-placeholder')
					$el.val(info)
					if ($el.data('ajp-placeholder-title')) {
						$el.attr('title', '')
						$el.data('ajp-placeholder-title', 0)
					}
				}
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.popup = { version: '0.2pa', serial: 1, contexts: { }, docEvents: { } }

	$.fn.extend({

		ajp$popup: function (options) {

			var defaults = {
				action: 'click', // click or hover
				popup: '.popup', // selector of function
				show: function ($popup, $el) {
					$el.addClass('ajp-popup-visible')
					$popup.css({ visibility: 'visible' })
				},
				hide: function ($popup, $el) {
					$el.removeClass('ajp-popup-visible')
					$popup.css({ visibility: 'hidden' })
				}
				// beforeShow: function ($popup, $el) { ... }
				// beforeHide: function ($popup, $el) { ... }
				// afterShow: function ($popup, $el) { ... }
				// afterHide: function ($popup, $el) { ... }
			}

			var opts = $.extend(defaults, options);

			if (opts.action == 'click' && !$.ajp.popup.docEvents['click']) {

				function hideAll() {
					for (var id in $.ajp.popup.contexts)
						$.ajp.popup.contexts[id].hide()
				}

				$(document).find('body:eq(0)').keydown(function (evt) {
					if (evt.keyCode == 27)
						hideAll()
				})

				$(document).bind('click', function (evt) {
					for (var id in $.ajp.popup.contexts) {
						var ctx = $.ajp.popup.contexts[id]
						var $popup = ctx.getPopup()
						if (!$popup.data('ajp-popup-opening') && $popup.css('visibility') == 'visible')
							ctx.hide()
						$popup.data('ajp-popup-opening', false)
					}
				})

				$.ajp.popup.docEvents['click'] = true
			}

			return this.each(function () {

				var $el = $(this)
				var $popup = (typeof opts.popup == 'function' ? opts.popup($el) : $el.find(opts.popup))

				var ctx = {
					getElement: function () {
						return $el
					},
					getPopup: function () {
						return $popup
					},
					show: function () {
						if ($el.hasClass('ajp-disabled'))
							return;
						if (opts.beforeShow)
							opts.beforeShow($popup, $el)
						opts.show($popup, $el)
						if (opts.afterShow)
							opts.afterShow($popup, $el)
					},
					hide: function () {
						if (opts.beforeHide)
							opts.beforeHide($popup, $el)
						opts.hide($popup, $el)
						if (opts.afterHide)
							opts.afterHide($popup, $el)
					}
				}

				var id = $.ajp.popup.serial ++
				$el.data('ajp-popup-id', id)
				$.ajp.popup.contexts[id] = ctx

				if (opts.action == 'click') {

					$el.bind('click', function () {
						if ($popup.css('visibility') == 'visible') {
							$popup.data('ajp-popup-opening', false)
						} else {
							$popup.data('ajp-popup-opening', true)
							ctx.show()
						}
					})

				} else if (opts.action == 'hover') {

					$el.hover(function () {
						ctx.show()
					}, function () {
						ctx.hide()
					})
				}
			})
		},

		ajp$popupContext: function () {
			return $.ajp.popup.contexts[this.data('ajp-popup-id')]
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.progressbar = { version: '0.3pa', installed: false, controls: [], serial: 1 }

	$.fn.extend({

		ajp$progressbar: function (options) {

			var defaults = {
				min: 0,
				max: 100,
				value: 0.0,
				text: true,
				duration: 'fast',
				easing: 'swing',
				onchange: function (val, $el) { }
			}

			var opts = $.extend(defaults, options);
			if (opts.min > opts.max) {
				var m = opts.min
				opts.min = opts.max
				opts.max = m
			}
			if (opts.value < opts.min) opts.value = opts.min
			if (opts.value > opts.max) opts.value = opts.max

			if (!$.ajp.progressbar.installed) {
				var savedVal = $.fn.val
				$.fn.val = function (value) {
					if ($(this).data('ajp-progressbar-id')) {
						var ctx = $(this).ajp$progressbarContext()
						return (value === undefined ? ctx.get() : ctx.set(value))
					}
					return savedVal.apply(this, arguments)
				}
				$.ajp.progressbar.installed = true
			}

			return this.each(function(i, el) {

				var $el = $(el)
				var $fill = $('<div class="fill"></div>').css({
					width: '0px',
					height: '' + $el.outerHeight() + 'px'
				})

				$el.prepend($fill)

				function setValue(value, raiseEvent) {
					var w = $el.outerWidth()
					var fw = ((value - opts.min) * w) / (opts.max - opts.min)
					$fill.stop(true, true).animate({
						width: '' + fw + 'px'
					}, opts.duration, opts.easing)
					$el.data('ajp-progressbar-value', value)
					if (raiseEvent === undefined || raiseEvent)
						opts.onchange(value, $el)
				}

				var id = $.ajp.progressbar.serial ++
				$.ajp.progressbar.controls[id] = setValue
				$el.data('ajp-progressbar-id', id)

				var dataVal = $el.data('ajp-progressbar-value')
				setValue(dataVal !== undefined ? dataVal : opts.value)
			})
		},

		ajp$progressbarContext: function () {
			var ctx = this
			return {
				set: function (value, raiseEvent) {
					ctx.each(function () {
						var f = $.ajp.progressbar.controls[$(this).data('ajp-progressbar-id')]
						if (f) f(value, raiseEvent)
					})
				},
				get: function () {
					return ctx.data('ajp-progressbar-value')
				}
			}
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }

	$.ajp.resizable = {
		version: '0.11pa',
		installed: false,
		serial: 1,
		current: undefined,
		elements: {},
		mouse: {}
	}

	$.fn.extend({

		ajp$unresizable: function () {
			return this.each(function(i, el) {
				var id = $(el).data('ajp-resizable-id');
				if (id && $.ajp.resizable.elements[id]) {
					$.ajp.resizable.elements[id].disable()
				}
			})
		},

		ajp$resizable: function (options) {

			var defaults = {
				proportional: false,
				minWidth: 40,
				minHeight: 40,
				onchange: function (w, h, $el) { }
			}

			var options = $.extend(defaults, options);

			var root = $('html')[0]
			if (!$.ajp.resizable.installed) {
				$(document).mousedown(function (evt) {
					if ($.ajp.resizable.current) {
						$.ajp.resizable.mouse.down = true;
						$.ajp.resizable.mouse.x = evt.clientX;
						$.ajp.resizable.mouse.y = evt.clientY;
						$.ajp.resizable.current.width = $.ajp.resizable.current.target.outerWidth()
						$.ajp.resizable.current.height = $.ajp.resizable.current.target.outerHeight()
						$.ajp.resizable.mouse.sel = root.onselectstart
						try {
							root.onselectstart = function () { return false }
						} catch (ex) {
							// msie: do nothing
						}
					}
				}).mouseup(function (evt) {
					$.ajp.resizable.mouse.down = false;
					$.ajp.resizable.current = undefined;
					try {
						root.onselectstart = $.ajp.resizable.mouse.sel
					} catch(ex) {
						// msie: do nothing
					}
				}).mousemove(function (evt) {
					if ($.ajp.resizable.mouse.down) {
						evt.preventDefault()
						var dx = evt.clientX - $.ajp.resizable.mouse.x;
						var dy = evt.clientY - $.ajp.resizable.mouse.y;
						if ($.ajp.resizable.current) {
							$.ajp.resizable.current.scale(dx, dy)
						}
					}
				})
				$.ajp.resizable.installed = true;
			}

			return this.each(function(i, el) {

				var api = {

					target: $(el),
					enabled: true,

					init: function () {

						var t = this.target;

						var id = t.data('ajp-resizable-id');
						if ($.ajp.resizable.elements[id]) {
							$.ajp.resizable.elements[id].enable();
							return;
						}

						$.ajp.resizable.elements[id] = this;

						var c = $('<div class="ajp-resizable-control"></div>');
						var z = t.css('z-index').replace(/[^0-9]/g, '');
						z = (z ? parseFloat(z) : 0);
						this.control = c
							.appendTo('body')
							.css({
								'z-index': z + 1,
								'position': 'absolute',
								'display': 'none'
							})
						;
						var ctx = this;
						t.mouseover(function (evt) {
							if (ctx.enabled)
								ctx.show()
						}).mouseout(function (evt) {
							ctx.hide()
						})
						c.mouseover(function (evt) {
							if (ctx.enabled) {
								ctx.show()
								$.ajp.resizable.current = ctx
							}
						}).mouseout(function (evt) {
							ctx.hide()
						})

						options.onchange(t.width(), t.height(), t)
					},

					disable: function () { this.enabled = false; this.hide() },

					enable: function () { this.enabled = true },

					hide: function () {
						this.target.removeClass('ajp-resizable-active')
						this.control.css({ display: 'none' })
					},

					show: function () {
						var t = this.target;
						var c = this.control;
						var o = t.offset();
						$('.ajp-resizable-control').css({ display: 'none' })
						t.addClass('ajp-resizable-active')
						c.css({
							display: 'block',
							left: '' + (o.left + t.outerWidth() - c.outerWidth()) + 'px',
							top: '' + (o.top + t.outerHeight() - c.outerHeight()) + 'px'
						})
					},

					scale: function (dx, dy) {

						if (!this.enabled) return;

						if (options.proportional) {
							if (dx > dy) {
								var s = (this.width + dx) / this.width;
								dy = this.height * s - this.height;
							} else {
								var s = (this.height + dy) / this.height;
								dx = this.width * s - this.width;
							}
						}

						var newWidth = parseInt(this.width + dx)
						var newHeight = parseInt(this.height + dy)

						if (newWidth >= options.minWidth && newHeight >= options.minHeight) {
							this.target
								.width('' + newWidth + 'px')
								.height('' + newHeight + 'px')
						}

						options.onchange(newWidth, newHeight, this.target)

						this.show()
					}
				}

				var idx = $.ajp.resizable.serial ++
				$(el).data('ajp-resizable-id', idx).bind('drag', function (evt) {
					evt.preventDefault()
				})

				api.init();
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.scrollable = { version: '0.9pa', optional: ['mousewheel', 'easing'], serial: 1, contexts: [] }

	$.fn.extend({

		ajp$scrollableContext: function () {
			if (this.length) {
				var serial = $(this[0]).data('ajp-scrollable-id')
				return $.ajp.scrollable.contexts[serial]
			}
			return null
		},

		ajp$scrollable: function (options) {

			var defaults = {
				duration: 'fast',
				easing: 'linear',
				mousewheel: false,
				orientation: 'horizontal',
				prev: '.ajp-scrollable-prev',
				next: '.ajp-scrollable-next',
				current: null
			}

			var defaultExtensible = {
				critical: 3,
				getUrl: function (offset) { return { url: './scrollable/', params: { 'offset': offset } } },
				getCount: function (response) { return response.items.length },
				getItem: function (response, i) { return response.items[i] }
			}

			var options = $.extend(defaults, options);

			if (options.extensible) {
				if (typeof options.extensible !== 'object')
					options.extensible = {}
				options.extensible = $.extend(defaultExtensible, options.extensible);
			}

			return this.each(function(i, el) {

				var api = {

					element: el,
					container: null,
					nItems: 0,
					canSelect: false,
					scrollLeft: 0,
					scrollTop: 0,

					cancelEvent: function (evt) {
						if (!evt) return;
						evt.cancelBubble = true;
						if (evt.stopPropagation) {
							evt.stopPropagation();
							evt.preventDefault();
						}
					},

					init: function () {

						var serial = ($.ajp.scrollable.serial ++)
						$.ajp.scrollable.contexts[serial] = this
						$(this.element).data('ajp-scrollable-id', serial).find('.ajp-scrollable').css({ overflow: 'hidden' })

						if ($(this.element).find('.ajp-scrollable > ul').length <= 0)
							$(this.element).find('.ajp-scrollable').append('<ul></ul>')

						this.container = $(this.element).find('.ajp-scrollable > ul:eq(0)')
							.css({ position: 'relative', left: 0, top: 0 });

						var ctx = this
						$(options.prev).click(function () { ctx.prev() })
						$(options.next).click(function () { ctx.next() })

						$(document).bind('mousedown', function (evt) {
							ctx.scrollLeft = ctx.container.scrollLeft()
							ctx.scrollTop = ctx.container.scrollTop()
						})
						$(document).bind('mouseup', function (evt) {
							ctx.container.scrollLeft(ctx.scrollLeft)
							ctx.container.scrollTop(ctx.scrollTop)
						})
						$(this.element).find('.ajp-scrollable').scroll(function (evt) {
							$(this).scrollLeft(ctx.scrollLeft)
							$(this).scrollTop(ctx.scrollTop)
							return false
						})

						if (options.mousewheel) {
							try {
								$(this.element).find('.ajp-scrollable').mousewheel(function (evt, delta) {
									if (delta > 0) ctx.prev(); else ctx.next();
									ctx.cancelEvent(evt);
								})
							} catch (ex) { }
						}

						this.reinit()
						this.canSelect = true;

						if (options.current)
							this.selectItem(this.index = options.current)
					},

					reinit: function () {

						var items = this.container.children('li');
						this.nItems = items.length;

						items.eq(0).clone().appendTo(this.container);
						items.eq(this.nItems - 1).clone().prependTo(this.container);

						this.paddingLeft = parseInt(items.eq(0).css('padding-left'));
						this.paddingRight = parseInt(items.eq(0).css('padding-right'));
						this.paddingTop = parseInt(items.eq(0).css('padding-top'));
						this.paddingBottom = parseInt(items.eq(0).css('padding-bottom'));
						this.width = $(this.element).find('.ajp-scrollable').innerWidth();
						this.height = $(this.element).find('.ajp-scrollable').innerHeight();

						this.pack()
						this.toBegin();

						if (options.extensible && items.length == 0)
							this.extend(true)
					},

					pack: function () {

						if (options.orientation == 'horizontal') {
							this.container.css({
								width: '' + (this.width * (this.nItems + 2)) + 'px',
								height: '' + this.height + 'px'
							});
						} else {
							this.container.css({
								width: '' + this.width + 'px',
								height: '' + (this.height * (this.nItems + 2)) + 'px'
							});
						}

						var itemWidth = this.width - this.paddingLeft - this.paddingRight;
						var itemHeight = this.height - this.paddingTop - this.paddingBottom;
						var itemPadding = '' + this.paddingTop + 'px, '
							 + this.paddingRight + 'px, '
							 + this.paddingBottom + 'px, '
							 + this.paddingLeft + 'px';
						var itemFloating = (options.orientation == 'horizontal' ? 'left' : 'none')

						$(this.element).find('.ajp-scrollable > ul > li')
							.css({
								width: itemWidth,
								height: itemHeight,
								padding: itemPadding,
								display: 'block',
								'float': itemFloating
							})
					},

					appendItems: function (items) {
						if (this.nItems <= 0) {
							for (var i = 0; i < items.length; i ++)
								this.container.append('<li>' + items[i] + '</li>')
							this.reinit()
						} else {
							this.nItems += items.length;
							var place = (options.orientation == 'horizontal' ?
								this.container.children('li:last-child') :
								this.container.children('li').eq(this.nItems - items.length + 1));
							for (var i = 0; i < items.length; i ++)
								place.before('<li>' + items[i] + '</li>');
							this.container.children('li:eq(0)').html(items[i - 1]);
							this.pack()
						}
					},

					extend: function (x) {
						var ctx = this;
						var ext = options.extensible;
						if (ext) {
							var u = ext.getUrl(ctx.nItems);
							$.getJSON(u.url, u.params, function (resp) {
								var items = [];
								var n = ext.getCount(resp);
								for (var i = 0; i < n; i ++)
									items.push(ext.getItem(resp, i));
								ctx.appendItems(items);
							})
						}
					},

					selectItem: function (i) {

						if (this.canSelect == false)
							return;
                                                this.canSelect = false;

						var ctx = this;
						var callback = function () {
							if (i >= ctx.nItems) {
								ctx.toBegin()
							} else if (i < 0) {
								ctx.toEnd()
							}
							ctx.canSelect = true; 
						}
						if (options.extensible && (ctx.nItems - i) <= options.extensible.critical)
							this.extend();
						this.index = i;
						if (options.orientation == 'horizontal') {
							this.container.animate({ left: '' + (-(this.index + 1) * this.width) + 'px' },
								options.duration, options.easing, callback);
						} else {
							this.container.animate({ top: '' + (-(this.index + 1) * this.height) + 'px' },
								options.duration, options.easing, callback);
						}
					},

					next: function () { this.selectItem(this.index + 1) },
					prev: function () { this.selectItem(this.index - 1) },

					toBegin: function () {
						this.index = 0;
						if (options.orientation == 'horizontal') {
							this.container.css({ left: '-' + this.width + 'px' });
						} else {
							this.container.css({ top: '-' + this.height + 'px' });
						}
					},

					toEnd: function () {
						this.index = this.nItems - 1;
						if (options.orientation == 'horizontal') {						
							this.container.css({ left: '-' + ((this.index + 1) * this.width) + 'px' });
						} else {
							this.container.css({ top: '-' + ((this.index + 1) * this.height) + 'px' });
						}
					}
				}

				api.init()
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.select = { version: '0.6pa', required: ['slider', 'popup'], optional: ['mousewheel'], serial: 1, contexts: { }, installed: false }

	$.fn.extend({

		ajp$select: function (options) {

			var defaults = {
				select: 'text', // text | html
				scrollbars: 'vertical', // vertical | native | none
				action: 'click', // see 'popup'
				// show: function ($popup, $el) { ... } // see 'popup'
				// hide: function ($popup, $el) { ... } // see 'popup'
				getItemContent: function ($opt) { return $opt.text() },
				empty: '<div class="ajp-message">list is empty...</div>',
				mousewheel: true,
				searchbox: false,
				searchboxMatcher: function (filterText, itemText) { return itemText.toLowerCase().indexOf(filterText.toLowerCase()) == 0 }
			}

			var opts = $.extend(defaults, options);

			return this.each(function(i, el) {

				var $el = $(el).css({ display: 'none' })

				var html = '';
				html += '<div class="ajp-select">'
					html += '<div class="ajp-current">...</div>'
					html += '<div class="ajp-disclosure-arrow"></div>'
					html += '<div class="ajp-list">'
						if (opts.searchbox) {
							html += '<input type="text" class="field"/>'
						}
						html += '<div class="ajp-list-top"></div>'
						html += '<div class="ajp-list-items"></div>'
						html += '<div class="ajp-list-right"></div>'
						html += '<div class="ajp-list-bottom"></div>'
					html += '</div>'
				html += '</div>'

				var $sel = $(html).insertAfter($el)
				$sel.attr('class', $sel.attr('class') + ' ' + $el.attr('class'))

				var $r = $sel.find('.ajp-list-right:eq(0)')
				var $i = $sel.find('.ajp-list-items:eq(0)')

				if (opts.scrollbars == 'vertical') {
					var $vsb = $('<div class="ajp-vsb"></div>')
					$r.append($vsb)
					$vsb.ajp$slider({ orientation: 'vertical', onchange: function (val) {
						var items = $i.children('.ajp-item')
						var totalHeight = 0
						items.each(function () {
							var $ci = $(this)
							if ($ci.css('display') != 'none')
								totalHeight += $ci.outerHeight()
						})
						$i.scrollTop((totalHeight - $i.innerHeight()) * val)
					}})
					if (opts.action == 'click') {
						$vsb.mouseup(function (evt) {
							$sel.find('.ajp-list').css({ visibility: 'hidden' })
						})
					}
				} else {
					$i.addClass('ajp-no-vsb')
				}

				if (opts.scrollbars == 'native')
					$i.addClass('ajp-sb-native')

				function invalidate() {

					var $cur = $sel.children('.ajp-current')
					var $opt = $sel.find('.ajp-selected:eq(0)')
					if ($opt.length <= 0)
						$opt = $sel.find('.ajp-item:eq(0)')
					if ($opt.length > 0) {
						if (opts.select == 'text') {
							$cur.text($opt.text())
						} else {
							$cur.html($opt.html())
						}
					} else {
						$cur.html('<!-- -->')
					}

					var $i = $sel.find('.ajp-list-items:eq(0)')
					var top = 0
					var item = $i.children('.ajp-selected')
					if (item.length > 0) {
						do {
							item = item.prev()
							if (item.length > 0)
								top += (item.css('display') == 'none' ? 0 : item.outerHeight())
						} while (item.length > 0)
						$i.scrollTop(top)
						top = $i.scrollTop()
					}

					var $vsb = $sel.find('.ajp-list-right > .ajp-vsb')
					if ($vsb.length > 0) {
						var items = $i.children('.ajp-item')
						var visibleHeight = $i.innerHeight()
						var totalHeight = 0
						items.each(function () {
							var $ci = $(this)
							if ($ci.css('display') != 'none')
								totalHeight += $ci.outerHeight()
						})
						var $control = $vsb.children('.control')
						if (!$control.data('ajp-min-height'))
							$control.data('ajp-min-height', $control.height())
						var minHeight = $control.data('ajp-min-height')
						var h = (visibleHeight * $vsb.innerHeight()) / totalHeight
						$control.height(h < minHeight ? minHeight : h)
						$vsb.val(top / (totalHeight - visibleHeight))
						if (visibleHeight < totalHeight) {
							$vsb.css({ display: 'block' })
							$i.removeClass('ajp-no-vsb')
						} else {
							$vsb.css({ display: 'none' })
							$i.addClass('ajp-no-vsb')
						}
					}
				}

				function selectItem($opt, raiseEvent) {
					var $list = $sel.find('.ajp-list-items')
					$list.children('.ajp-item').removeClass('ajp-selected')
					$opt.addClass('ajp-selected')
					invalidate()
					if (opts.action != 'click')
						$sel.ajp$popupContext().hide()
					if (raiseEvent) {
						var val = $opt.data('ajp-value')
						$el.children('option').each(function () {
							var $src = $(this)
							if ($src.attr('value') == val)
								$src.attr('selected', true)
						})
						$el.change()
					}
				}

				function getItem(val) {
					var $opt = $sel.find('.ajp-item:eq(0)')
					$sel.find('.ajp-item').each(function () {
						var $item = $(this)
						if (!$item.hasClass('ajp-disabled') && $item.data('ajp-value') == val)
							$opt = $item
					})
					return $opt
				}

				if (opts.searchbox) {
					$sel.find('input').click(function (evt) {
						evt.preventDefault()
						evt.stopPropagation()
						return false
					}).bind('keyup', function (evt) {
						var filterText = $(this).val()
						$sel.find('.ajp-item').each(function () {
							var $item = $(this)
							$item.css({ display: (opts.searchboxMatcher(filterText, $item.text()) ? 'block' : 'none') })
						})
						invalidate()
					})
				}

				$sel.ajp$popup({
					action: opts.action,
					show: opts.show,
					hide: opts.hide,
					popup: '.ajp-list'
				})

				if (opts.mousewheel) {
					$sel.find('.ajp-list').mousewheel(function (evt, delta, deltaX, deltaY) {
						var $vsb = $sel.find('.ajp-list-right > .ajp-vsb')
						var val = $vsb.val()
						if (deltaY < 0) {
							val += 0.05
						} else {
							val -= 0.05
						}
						if (val < 0) val = 0
						if (val > 1) val = 1
						$vsb.val(val)
					})
					
				}

				var ctx = {

					sync: function () {
						if ($el.attr('disabled')) {
							if (!$sel.hasClass('ajp-disabled'))
								$sel.addClass('ajp-disabled')
						} else {
							$sel.removeClass('ajp-disabled')
						}
						var $list = $sel.find('.ajp-list-items')
						$list.html('<!-- -->')
						$el.find('option').each(function () {
							var $src = $(this)
							var $opt = $('<div class="ajp-item"></div>')
							$opt.html(opts.getItemContent($src))
							$opt.data('ajp-value', $src.attr('value'))
							if ($src.attr('disabled')) {
								$opt.addClass('ajp-disabled')
								if (opts.action == 'click')
									$opt.mouseup(function () {
										$sel.children('.ajp-list').css({ visibility: 'hidden' })
									})
							} else {
								$opt.click(function () { selectItem($opt, true) })
							}
							if ($src.attr('selected')) {
								$list.children('.ajp-item').removeClass('ajp-selected')
								$opt.addClass('ajp-selected')
							}
							$list.append($opt)
						})
						if ($list.children('.ajp-item').length <= 0)
							$list.html(opts.empty)
						invalidate()
					},

					get: function () {
						return $sel.find('.ajp-selected').data('ajp-value')
					},

					set: function (val) {
						if (this.get() != val)
							selectItem(getItem(val), true)
					}
				}

				var id = ($.ajp.select.serial ++)
				$.ajp.select.contexts[id] = ctx
				$el.data('ajp-select-id', id)
				$sel.data('ajp-select-id', id)

				$(document).keydown(function (evt) {
					if ($sel.find('.ajp-list').css('visibility') == 'visible') {
						if (evt.keyCode == 38) {
							var p = $sel.find('.ajp-selected').prev()
							while (p.length > 0) {
								if (!p.hasClass('ajp-disabled')) {
									selectItem(p, true)
									break
								}
								p = p.prev()
							}
						} else if (evt.keyCode == 40) {
							var n = $sel.find('.ajp-selected').next()
							while (n.length > 0) {
								if (!n.hasClass('ajp-disabled')) {
									selectItem(n, true)
									break
								}
								n = n.next()
							}
						}
					}
				})

				ctx.sync()

				$el.change(function () {
					var val = $el.children('option[selected]').attr('value')
					if (ctx.get() != val)
						selectItem(getItem(val), false)
				})
			})
		},

		ajp$selectContext: function () {
			var id = this.data('ajp-select-id')
			return $.ajp.select.contexts[id]
		}

	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.slider = { version: '0.6pa', installed: false, controls: [], serial: 1 }

	$.fn.extend({

		ajp$slider: function (options) {

			var defaults = {
				min: 0.0,
				max: 1.0,
				value: 0.0,
				orientation: 'horizontal',
				onchange: function (val, $slider) { }
			}

			var opts = $.extend(defaults, options);
			if (opts.min > opts.max) {
				var m = opts.min
				opts.min = opts.max
				opts.max = m
			}
			if (opts.value < opts.min) opts.value = opts.min
			if (opts.value > opts.max) opts.value = opts.max

			if (!$.ajp.slider.installed) {
				var savedVal = $.fn.val
				$.fn.val = function (value) {
					if ($(this).data('ajp-slider-id')) {
						var ctx = $(this).ajp$sliderContext()
						return (value === undefined ? ctx.get() : ctx.set(value))
					}
					return savedVal.apply(this, arguments)
				}
				$.ajp.slider.installed = true
			}

			return this.each(function(i, el) {

				var $el = $(el)
				var $sl = $('<div class="control"></div>')
				var $lln = $('<div class="left-line"></div>')
				var $ln = $('<div class="line"></div>')

				$el.append($ln)
				$el.append($sl)
				$el.append($lln)

				function shiftHorizontal(dx, raiseEvent) {
					var w = $ln.outerWidth() - $sl.outerWidth()
					var l = parseInt($sl.css('left')) + dx
					if (l < 0) l = 0
					if (l > w) l = w
					$lln.css('width', l.toString() + 'px')
					$sl.css('left', l.toString() + 'px')
					var val = opts.min + (l/w) * (opts.max - opts.min)
					$el.data('ajp-slider-value', val)
					if (raiseEvent === undefined || raiseEvent)
						opts.onchange(val, $el)
				}

				function shiftVertical(dy, raiseEvent) {
					var h = $el.height() - $sl.outerHeight()
					var t = parseInt($sl.css('top')) + dy
					if (t < 0) t = 0
					if (t > h) t = h
					$lln.css('height', t.toString() + 'px')
					$sl.css('top', t.toString() + 'px')
					var val = opts.min + (t/h) * (opts.max - opts.min)
					$el.data('ajp-slider-value', val)
					if (raiseEvent === undefined || raiseEvent)
						opts.onchange(val, $el)
				}

				var mouse = { x: 0, y: 0, down: false }
				var root = $('html')[0]

				$sl.mousedown(function (evt) {
					mouse.down = true
					mouse.x = evt.clientX
					mouse.y = evt.clientY
					try {
						mouse.sel = root.onselectstart
						root.onselectstart = function () { return false }
					} catch (ex) {
						// msie: do nothing
					}
				})
				$(document).mouseup(function (evt) {
					mouse.down = false
					mouse.x = evt.clientX
					mouse.y = evt.clientY
					try {
						root.onselectstart = mouse.sel
					} catch (ex) {
						// msie: do nothing
					}
				}).mousemove(function (evt) {
					if (mouse.down) {
						var dx = evt.clientX - mouse.x 
						var dy = evt.clientY - mouse.y
						if (opts.orientation == 'horizontal') {
							shiftHorizontal(dx)
						} else {
							shiftVertical(dy)
						}
						mouse.x = evt.clientX
						mouse.y = evt.clientY
					}
				})

				function setValue(value, raiseEvent) {
					if (opts.orientation == 'horizontal') {
						var w = $ln.outerWidth() - $sl.outerWidth()
						var dx = ((value - opts.min) * w) / (opts.max - opts.min)
						$sl.css('left', 0)
						shiftHorizontal(dx, raiseEvent)
					} else {
						var h = $el.height() - $sl.outerHeight()
						var dy = ((value - opts.min) * h) / (opts.max - opts.min)
						$sl.css('top', 0)
						shiftVertical(dy, raiseEvent)
					}
				}

				var id = $.ajp.slider.serial ++
				$.ajp.slider.controls[id] = { 'setValue': setValue, 'opts': opts }
				$el.data('ajp-slider-id', id)

				setValue(opts.value)
			})
		},

		ajp$sliderContext: function () {
			var ctx = this
			return {
				set: function (value, raiseEvent) {
					ctx.each(function () {
						var c = $.ajp.slider.controls[$(this).data('ajp-slider-id')]
						if (c) c.setValue(value, raiseEvent)
					})
				},
				get: function () {
					var c = $.ajp.slider.controls[$(ctx).data('ajp-slider-id')]
					if (c) {
						var val = $(ctx).data('ajp-slider-value')
						return (val === undefined ? c.opts.value : val)
					}
					return undefined
				}
			}
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.starating = { version: '0.6pa', installed: false, opts: [], serial: 1 }

	$.fn.extend({

		ajp$starating: function (options) {

			var defaults = {
				starClass: 'star',
				rating: 0,
				width: 16,
				height: 16,
				nStars: 5,
				image: 'star-ratings.png',
				onchange: undefined, // function (value, star) { ... }
				voteHandler: undefined // function (vote, star) { $(star).parent().ajp$staratingContext().set(vote) }
			}

			var options = $.extend(defaults, options)

			if (!$.ajp.starating.installed) {
				var savedVal = $.fn.val
				$.fn.val = function (value) {
					if ($(this).data('ajp-starating-id')) {
						var ctx = $(this).ajp$staratingContext()
						return (value === undefined ? ctx.get() : ctx.set(value))
					}
					return savedVal.apply(this, arguments)
				}
				$.ajp.starating.installed = true
			}

			this.css({
				width: '' + (options.width * options.nStars) + 'px',
				height: '' + options.height + 'px',
				cursor: (options.voteHandler ? 'pointer' : 'auto')
			})

			this.each(function () {
				var id = $.ajp.starating.serial ++
				$(this).data('ajp-starating-id', id)
				$.ajp.starating.opts[id] = options
			})

			var starSelector = (/^\./.test(options.starClass) ? options.starClass : '.' + options.starClass)
			if (options.voteHandler) {
				this.each(function () {
					var n = $(this).find(starSelector).length
					while (n < options.nStars) {
						$(this).append('<div class="' + options.starClass + '"></div>')
						n ++
					}
				})
			}

			this.find(starSelector).css({
				width: '' + options.width + 'px',
				height: '' + options.height + 'px',
				'float': 'left'
			})

			if (typeof options.rating == 'function') {
				this.each(function () {
					var $el = $(this)
					$el.ajp$staratingContext().set(options.rating($el))
				})
			} else {
				this.ajp$staratingContext().set(options.rating)
			}

			if (options.voteHandler) {

				this.find(starSelector).mouseover(function () {
					var star = $(this).index() + 1
					$(this).parent().css('background-position', '0 -' + (options.height * 2 * star) + 'px')
				}).click(function () {
					var vote = $(this).index() + 1
					options.voteHandler(vote, this)
				})

				this.mouseout(function (){
					var originalresult = $(this).data('ajp-starating-value')
					$(this).ajp$staratingContext().set(originalresult)
				})


			}
		},

		ajp$staratingContext: function () {
			var ctx = this
			return {
				set: function (r) {
					ctx.data('ajp-starating-value', r)
					var h = (Math.round(r) > r ? 1 : 0)
					$(ctx).each(
						function () {
							var $el = $(this)
							var opts = $.ajp.starating.opts[$el.data('ajp-starating-id')]
							$(ctx).css({
								'background-image': 'url(' + (typeof opts.image == 'function' ? opts.image(r, $el) : opts.image) + ')'
							})
							if (opts.onchange)
								opts.onchange(r, this)
						}
					)
					$(ctx).css('background-position', '0 -' + ($(ctx).height() * (2 * parseInt(r) + h)) + 'px')
				},
				get: function () {
					return ctx.data('ajp-starating-value')
				}
			}
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.tagscloud = { version: '0.2pa' }

	$.fn.extend({

		ajp$tagscloud: function (options) {

			var defaults = {

				tags: [],

				loPerc: 100,
				hiPerc: 150
			}

			var opts = $.extend(defaults, options);

			return this.each(function(i, el) {

				var api = {

					init: function () {
						var t = (typeof opts.tags === 'function' ? opts.tags(el) : opts.tags)
						var _min = 0;
						var _max = 0;
						for (var i = 0; i < t.length; i ++) {
							var c = t[i].weight;
							_min = (c > _min) ? _min : c;
							_max = (c < _max) ? _max : c;
						}
						var _m = (opts.hiPerc - opts.loPerc) / (_max - _min);
						$(el).empty();
						for (var i = 0; i < t.length; i ++)
							$(el).append('<a' + (t[i].href ? ' href="' + t[i].href + '"' : '')
								+ ' title="' + (t[i].title ? t[i].title : t[i].weight) + '" style="font-size: '
								+ (opts.loPerc + ((_max - (_max - (t[i].weight - _min))) * _m))
								+ '%">' + t[i].tag + '</a> ')
					}
				}

				api.init()
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.tooltip = { version: '0.3pa' }

	$.fn.extend({

		ajp$tooltip: function (options) {

			var defaults = {
				content: function ($e) {
					return $e.data('ajp-tooltip')
				},
				show: function ($t, x, y, $e) {
					$t.css({ display: 'block', left: x, top: y })
				},
				hide: function ($t, $e) {
					$t.css({ display: 'none' })
				}
			}

			var opts = $.extend(defaults, options);

			return this.each(function(i, el) {
				var $el = $(el)
				var c = (typeof opts.content == 'function' ? opts.content($el) : opts.content)
				var t = $('<div class="ajp-tooltip"><div class="top"></div><div class="middle"></div><div class="bottom"></div></div>').appendTo('body')
				t.css({
					position: 'absolute',
					left: 0,
					top: 0,
					display: 'none'
				}).find('.middle').html(c)
				$(el).hover(
					function () {
						var o = $el.offset()
						var h = t.outerHeight()
						var w = t.outerWidth()
						opts.show(t, o.left - (w - $el.outerWidth()) / 2, o.top - h, $el)
					},
					function () {
						opts.hide(t, $el)
					}
				)
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.wysiwyg = { version: '0.6pa', required: ['editable', 'colorpicker', 'popup'], current: null, installed: false }

	$.fn.extend({

		ajp$wysiwyg: function (options) {

			var defaults = {
				toolbar: 'basic',
				air: false,
				offset: { left: 14, top: 14 }
			}

			var opts = $.extend(defaults, options);

			return this.each(function() {

				var $origin = $(this).css({ display: 'none' })
				var $editor = $('<div class="ajp-wysiwyg"></div>').html($origin.val()).insertAfter($origin)
				var $toolbar

				if (typeof opts.toolbar == 'string') {
					var html = ''
					if (opts.toolbar == 'basic') {
						html = ''
						+ '<div class="ajp-wysiwyg-toolbar">'
						+ '	<div class="select styling-1 popup-open button">'
						+ '		<span class="label">Style</span><div class="disclosure-arrow"></div>'
						+ '		<div class="popup">'
						+ '			<div data-cmd="h1">Header 1</div>'
						+ '			<div data-cmd="h2">Header 2</div>'
						+ '			<div data-cmd="h3">Header 3</div>'
						+ '			<div data-cmd="h4">Header 4</div>'
						+ '			<div data-cmd="h5">Header 5</div>'
						+ '			<div data-cmd="h6">Header 6</div>'
						+ '			<div data-cmd="code"><code>Code</code></div>'
						+ '			<div data-cmd="small"><small>Small</small></div>'
						+ '			<div data-cmd="blockquote"><small>Blockquote</small></div>'
						+ '		</div>'
						+ '	</div>'
						+ '	<div class="separator"></div>'
						+ '	<div class="button" data-cmd="bold"><span>B</span></div>'
						+ '	<div class="button" data-cmd="italic"><span>I</span></div>'
						+ '	<div class="button" data-cmd="underline"><span>U</span></div>'
						+ '	<div class="button" data-cmd="strikethrough"><span>S</span></div>'
						+ '	<div class="separator"></div>'
						+ '	<div class="foreground-colorpicker button"><span class="letter">A</span><div class="disclosure-arrow"></div></div>'
						+ '	<div class="background-colorpicker button"><span class="letter">A</span><div class="disclosure-arrow"></div></div>'
						+ '	<div class="separator"></div>'
						+ '	<div class="button" data-cmd="sup"><span>X<sup>2</sup></span></div>'
						+ '	<div class="button" data-cmd="sub"><span>X<sub>2</sub></span></div>'
						+ '	<div class="separator"></div>'
						+ '	<div class="button image-button" data-cmd="ul"></div>'
						+ '	<div class="button image-button" data-cmd="ol"></div>'
						+ '	<div class="separator"></div>'
						+ '	<div class="button image-button" data-cmd="left"></div>'
						+ '	<div class="button image-button" data-cmd="center"></div>'
						+ '	<div class="button image-button" data-cmd="right"></div>'
						+ '	<div class="button image-button" data-cmd="justify"></div>'
						+ '	<div class="separator"></div>'
						+ '	<div class="button image-button" data-cmd="image"></div>'
						+ '	<div class="separator"></div>'
						+ '	<div class="button image-button" data-cmd="anchor"></div>'
						+ '	<div class="separator"></div>'
						+ '	<div class="button image-button" data-cmd="text"></div>'
						+ '	<div class="separator"></div>'
						+ '	<div class="button" data-cmd="codemode"><span>&lt;/&gt;</span></div>'
						+ '	<div class="clear"></div>'
						+ '</div>'
					} else if (opts.toolbar == 'mini') {
						html = ''
						+ '<div class="ajp-wysiwyg-toolbar">'
						+ '	<div class="select heading popup-open button">'
						+ '		<span class="label">H</span><div class="disclosure-arrow"></div>'
						+ '		<div class="popup">'
						+ '			<div data-cmd="h1">Header 1</div>'
						+ '			<div data-cmd="h2">Header 2</div>'
						+ '			<div data-cmd="h3">Header 3</div>'
						+ '			<div data-cmd="h4">Header 4</div>'
						+ '			<div data-cmd="h5">Header 5</div>'
						+ '			<div data-cmd="h6">Header 6</div>'
						+ '		</div>'
						+ '	</div>'
						+ '	<div class="separator"></div>'
						+ '	<div class="select styling-2 popup-open button">'
						+ '		<span class="label">A</span><div class="disclosure-arrow"></div>'
						+ '		<div class="popup">'
						+ '			<div data-cmd="bold">Bold</div>'
						+ '			<div data-cmd="italic">Italic</div>'
						+ '			<div data-cmd="underline">Underline</div>'
						+ '			<div data-cmd="strikethrough">Strikethrough</div>'
						+ '			<div data-cmd="code"><code>Code</code></div>'
						+ '			<div data-cmd="small"><small>Small</small></div>'
						+ '			<div data-cmd="blockquote"><small>Blockquote</small></div>'
						+ '			<div data-cmd="sup">X<sup>2</sup></div>'
						+ '			<div data-cmd="sub">X<sub>2</sub></div>'
						+ '		</div>'
						+ '	</div>'
						+ '	<div class="separator"></div>'
						+ '	<div class="foreground-colorpicker button"><span class="letter">A</span><div class="disclosure-arrow"></div></div>'
						+ '	<div class="background-colorpicker button"><span class="letter">A</span><div class="disclosure-arrow"></div></div>'
						+ '	<div class="separator"></div>'
						+ '	<div class="subtoolbar popup-open button align">'
						+ '		<div class="img"></div><div class="disclosure-arrow"></div>'
						+ '		<div class="popup">'
						+ '			<div class="image-button" data-cmd="left"></div>'
						+ '			<div class="separator"></div>'
						+ '			<div class="image-button" data-cmd="center"></div>'
						+ '			<div class="separator"></div>'
						+ '			<div class="image-button" data-cmd="right"></div>'
						+ '			<div class="separator"></div>'
						+ '			<div class="image-button" data-cmd="justify"></div>'
						+ '			<div class="clear"></div>'
						+ '		</div>'
						+ '	</div>'
						+ '	<div class="separator"></div>'
						+ '	<div class="button image-button" data-cmd="ul"></div>'
						+ '	<div class="button image-button" data-cmd="ol"></div>'
						+ '	<div class="separator"></div>'
						+ '	<div class="button image-button" data-cmd="image"></div>'
						+ '	<div class="separator"></div>'
						+ '	<div class="button image-button" data-cmd="anchor"></div>'
						+ '	<div class="separator"></div>'
						+ '	<div class="button image-button" data-cmd="text"></div>'
						+ '	<div class="separator"></div>'
						+ '	<div class="button" data-cmd="codemode"><span>&lt;/&gt;</span></div>'
						+ '	<div class="clear"></div>'
						+ '</div>'
					}

					$toolbar = $(html)
					$editor.before($toolbar)
					
				} else {

					$toolbar = opts.toolbar($editor)
				}

				$toolbar.append('<input type="hidden" name="codemode" value="no"/>')

				$editor.ajp$editable()
				var ctx = $editor.ajp$editableContext()

				$editor.parents('form').submit(function () {
					$origin.val(ctx.get())
					return true
				})

				$toolbar.find('.image-button').each(function () {
					var $btn = $(this)
					if ($btn.children('.img').length <= 0)
						$btn.append('<div class="img"></div>')
				})

				$toolbar.find('.button, button, .popup > div').each(function () {
					var $command = $(this)
					var cmd = $command.data('cmd')
					if (cmd) {
						$command.addClass('cmd-' + cmd).click(function () {
							if (!$command.hasClass('disabled')) {
								if (cmd == 'codemode') {
									var $flag = $toolbar.find('input[name=codemode]')
									if ($flag.val() == 'no') {
										$toolbar.children('.button').addClass('disabled')
										$toolbar.find('.cmd-codemode').removeClass('disabled')
										$flag.val('yes')
									} else {
										$toolbar.children('.button').removeClass('disabled')
										$flag.val('no')
									}
								}
								ctx.execCommand(cmd)
							}
						})
					}
				})

				if (!$.ajp.wysiwyg.installed) {

					$.ajp.wysiwyg.installed = true

					$(document).find('body:eq(0)').keydown(function (evt) {
						if (opts.air)
							$toolbar.css({ visibility: 'hidden' })
					})
				}

				$toolbar.find('.button').mousedown(function () {
					ctx.saveSelection()
				})

				$toolbar.find('.button').mouseup(function () {
					$editor.focus()
					ctx.restoreSelection()
				})

				$toolbar.find('.popup-open').ajp$popup()

				$toolbar.find('.foreground-colorpicker').ajp$colorpicker({
					onchange: function (val) {
						ctx.replaceSelection('<span style="color: ' + val + '">' + ctx.getSelectedHtml() + '</span>')
					}
				})

				$toolbar.find('.background-colorpicker').ajp$colorpicker({
					onchange: function (val) {
						ctx.replaceSelection('<span style="background-color: ' + val + '">' + ctx.getSelectedHtml() + '</span>')
					}
				})

				$toolbar.css({ display: 'block' })

				if (opts.air) {

					$toolbar.addClass('ajp-wysiwyg-toolbar-air').css({
						visibility: 'hidden',
						position: 'absolute',
						left: '0px',
						top: '0px'
					})

					$editor.mouseup(function (evt) {
						var sel = ctx.getSelectedHtml()
						if (sel.length > 0) {
							$toolbar.css({ visibility: 'visible' }).offset({
								left: (evt.clientX + $(document).scrollLeft() + opts.offset.left),
								top: (evt.clientY + $(document).scrollTop() + opts.offset.top)
							})
						} else {
							$toolbar.css({ visibility: 'hidden' })
						}
					})
				}
			})
		}
	})

})(jQuery);

