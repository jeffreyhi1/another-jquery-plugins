/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function($){

	if (!$.ajp) $.ajp = { }
	$.ajp.autocomplete = { version: '0.13pa', forms: {}, last: false }

	$.fn.extend({

		ajp$autocomplete: function(options) {

			var defaults = {  

				deltaX: 0,
				deltaY: 0,
				paddingWidth: 0,

				caching: true,

				getUrl: function (needle) {
					return { url: './autocomplete/', params: { 'needle': needle } }
				},

				selectItem: function (ctx, i) { ctx.selected = i },

				parseResponse: function (ctx, resp) {

					ctx.remoteResponse = resp

					var variants = []
					for (var i = 0; i < resp.variants.length; i ++)
						variants.push(resp.variants[i])

					ctx.setVariants(variants)
					ctx.show()
				}
			}

			var options = $.extend(defaults, options);

			$('form').each(function (i, el) { if (!$(el).attr('id')) el.id = 'form-autogenerated-id-' + i })

			return this.each(function(i, e) {

				var api = {

					requestId: 0,
					list: null,
					target: null,
					variants: [],
					selected: -1,
					cache: {},
					skipOne: false,
			
					init: function (target) {

						this.target = target
						this.list = document.createElement('div')
						var objList = $(this.list)
						objList.css('display', 'none').addClass('ajp-autocomplete-list')
						document.body.appendChild(this.list)

						var ctx = this
						var form = $($(this.target).attr('form'))
						if (!$.ajp.autocomplete.forms[form.attr('id')]) {
							$.ajp.autocomplete.forms[form.attr('id')] = true
							form.submit(function (evt) {
								var lists = $('.ajp-autocomplete-list:visible')
								if (lists.length > 0) {
									if (!/explorer/i.test(navigator.appName))
										lists.css({ display: 'none' })
									return false
								}
								return true
							})
							form.find('button[type=submit], input[type=submit]').focus(function () {
								if ($('.ajp-autocomplete-list:visible').length > 0 && $.ajp.autocomplete.last) {
									$($.ajp.autocomplete.last.target).focus();
									$.ajp.autocomplete.last.acquire()
								}
							})
						}
					},

					cancelEvent: function (evt) {
						evt.cancelBubble = true
						if (evt.stopPropagation) {
							evt.stopPropagation()
							evt.preventDefault()
						}
					},

					acquire: function (target) {
						this.hide()
						this.setVariants([])
					},

					setVariants: function (variants, req) {
						if (req === undefined || req >= this.requestId) {
							this.variants = variants
							options.selectItem(this, -1)
						}
					},

					hide: function () {
						$('.ajp-autocomplete-list').css('display', 'none').html('<!-- -->')
					},

					show: function () {

						var html = '';
						var itemClass = ' autocomplete-item-odd';
						for (var i = 0; i < this.variants.length; i ++) {
							if (typeof this.variants[i] == 'string') {
								itemClass = (itemClass.length > 0 ? '' : ' autocomplete-item-odd');
								html += '<div class="autocomplete-item ' + itemClass + (i == this.selected ? ' autocomplete-item-selected' : '') + '">'
									+ this.variants[i]
									+ '<input type="hidden" value="' + i + '"/>'
									+ '</div>';
							}
						}

						var ctx = this;
						$(this.list).html(html).find('.autocomplete-item').mouseover(function (evt) {
							options.selectItem(ctx, $(evt.currentTarget).find('input[type=hidden]:eq(0)').val());
							ctx.show();
						})

						var l = $(this.list);
						var t = $(this.target);
						var pos = t.offset();
						var offsetY = options.deltaY + parseInt(t.css('border-top-width'))
							+ parseInt(t.css('border-bottom-width'))
							+ parseInt(l.css('border-top-width'))
						;
						var paddingWidth = options.paddingWidth //+ parseInt(t.css('border-left-width'))
							//+ parseInt(t.css('border-right-width'))
							- parseInt(l.css('border-left-width'))
							- parseInt(l.css('border-right-width'))
						;
						var display = (this.variants.length > 0 ? '' : 'none');
						l.css({
							left: '' + (pos.left + options.deltaX) + 'px',
							top: '' + (pos.top + t.height() + offsetY - parseInt(t.css('border-bottom-width'))) + 'px',
							//width: '' + (t.width() + paddingWidth) + 'px',
							width: '' + (t.outerWidth() + paddingWidth) + 'px',
							'display': display
						});
					},

					refresh: function () {

						var ctx = this
						var needle = this.target.value

						if (options.caching && this.cache[needle]) {
							var data = this.cache[needle]
							if (data) {
								options.parseResponse(ctx, data)
								return
							}
						}

						var where = options.getUrl;
						if (typeof where == 'function')
							where = where(needle);
						where.params.requestId = ++ this.requestId;
						$.getJSON(where.url, where.params, function (data) {
							if (data && (data.requestId === undefined || data.requestId >= ctx.requestId)) {
								options.parseResponse(ctx, data)
								ctx.cache[needle] = data
							}
						});
					},

					selectCurrent: function (withoutFocus) {
						if (this.selected >= 0 && this.selected < this.variants.length)
							this.target.value = this.variants[this.selected]
						//this.hide();
						if (!withoutFocus)
							this.target.focus();
					},

					keyup: function (evt) {
						switch(evt.keyCode) {
						case 9: // tab
							this.hide()
							return false
						break;
						case 27: // esc
							this.hide()
							return false
						break;
						case 40: // down
							var i = this.selected + 1
							if (i >= this.variants.length)
								i = this.variants.length - 1
							options.selectItem(this, i)
							this.selectCurrent()
							this.show()
							return false
						break;
						case 38: // up
							var i = this.selected - 1
							if (i < -1)
								i = -1
							options.selectItem(this, i)
							this.selectCurrent()
							this.show()
							return false
						break;
						case 13: // enter
							this.selectCurrent()
							this.cancelEvent(evt)
							return false
						break;
						}
						this.refresh()
						return true
					}
				}

				api.init(e);

				$(e).focusin(function() {
					api.acquire()
				}).focusout(function() {
					api.selectCurrent(true)
					api.hide()
					$.ajp.autocomplete.last = api
				}).keyup(function(evt) {
					api.keyup(evt)
				}).attr('autocomplete', 'off')
			})
		}
	})
})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.autoheight = { version: '0.2pa' }

	$.fn.extend({

		ajp$autoheight: function (options) {

			var defaults = {
				effect: function ($el, newHeight, oldHeight) {
					$el.animate({ height: newHeight + 'px' }, 'slow', 'linear')
				}
			}

			var opts = $.extend(defaults, options);

			function reviewHeight() {
				return this.each(function(i, el) {
					var $el = $(el)
					var currentHeight = $el.outerHeight()
					$el.css({ height: 'auto' })
					var normalHeight = $el.outerHeight()
					$el.css({ height: currentHeight })
					opts.effect($el, normalHeight, currentHeight)
				})
			}

			return reviewHeight.apply(this)
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.bindkeys = { version: '0.13pa' }

	$.fn.extend({

		ajp$bindkeys: function (options) {

			var defaults = {
			}

			var opts = $.extend(defaults, options);

			return this.each(function(i, el) {

				var api = {

					hotKeys: [],

					cancelEvent: function (evt) {
						if (!evt) return;
						evt.cancelBubble = true;
						if (evt.stopPropagation) {
							evt.stopPropagation();
							evt.preventDefault();
						}
					},

					parseHotKey: function (hotKeyData) {
						var hotKey = {
							ctrlKey: false,
							altKey: false,
							shiftKey: false,
							keyCode: 0,
							shortcut: hotKeyData
						}
						var tokens = hotKeyData.toUpperCase().split('+')
						for (var i = 0; i < tokens.length; i ++) {
							var m;
							if (/^CTRL|CONTROL$/.test(tokens[i])) {
								hotKey.ctrlKey = true
							} else if (/^(ENTER|RETURN)$/.test(tokens[i])) {
								hotKey.keyCode = 13
							} else if (/^TAB$/.test(tokens[i])) {
								hotKey.keyCode = "\t".charCodeAt(0)
							} else if (/^BACKSPACE|BS(PC)?$/.test(tokens[i])) {
								hotKey.keyCode = "\b".charCodeAt(0)
							} else if (/^SPACE|SPC$/.test(tokens[i])) {
								hotKey.keyCode = ' '.charCodeAt(0)
							} else if (/^ESC(APE)?$/.test(tokens[i])) {
								hotKey.keyCode = 27
							} else if (/^(PAGE|PG)UP$/.test(tokens[i])) {
								hotKey.keyCode = 33
							} else if (/^(PAGE|PG)D(OW)?N$/.test(tokens[i])) {
								hotKey.keyCode = 34
							} else if (/^HOME$/.test(tokens[i])) {
								hotKey.keyCode = 36
							} else if (/^END$/.test(tokens[i])) {
								hotKey.keyCode = 35
							} else if (/^INS(ERT)?$/.test(tokens[i])) {
								hotKey.keyCode = 45
							} else if (/^DEL(ETE)?$/.test(tokens[i])) {
								hotKey.keyCode = 46
							} else if (/^LEFT$/.test(tokens[i])) {
								hotKey.keyCode = 37
							} else if (/^RIGHT$/.test(tokens[i])) {
								hotKey.keyCode = 39
							} else if (/^D(OW)?N$/.test(tokens[i])) {
								hotKey.keyCode = 40
							} else if (/^UP$/.test(tokens[i])) {
								hotKey.keyCode = 38
							} else if (/^ALT$/.test(tokens[i])) {
								hotKey.altKey = true
							} else if (/^SHI?FT$/.test(tokens[i])) {
								hotKey.shiftKey = true
							} else if ((m = tokens[i].match(/^F(\d+)$/))) {
								hotKey.keyCode = 111 + parseInt(m[1]);
							} else if (tokens[i] == '') {
								hotKey.keyCode = '+'.charCodeAt(0);
							} else {
								hotKey.keyCode = tokens[i].charCodeAt(0);
							}
						}
						return hotKey;
					},

					bindHotKey: function (hotKeyData, handler) {
						var hotKey = this.parseHotKey(hotKeyData);
						if (hotKey.keyCode)
							this.hotKeys.push({ 'hotKey': hotKey, 'handler': handler })
					},

					onkeydown: function (evt) {
						for (var i = 0; i < this.hotKeys.length; i ++) {
							var k = this.hotKeys[i].hotKey;
							if (
								(k.keyCode == evt.keyCode)
								&& (!k.ctrlKey || evt.ctrlKey)
								&& (!k.altKey || evt.altKey)
								&& (!k.shiftKey || evt.shiftKey)
							)
								return this.hotKeys[i].handler(evt, api);
						}
					}
				}

				var defaultCommands = { }

				$(el).keydown(function (evt) { api.onkeydown(evt) });

				for (var key in opts) {
					var cmd = opts[key];
					if (typeof cmd == 'string')
						cmd = defaultCommands[cmd];
					if (cmd)
						api.bindHotKey(key, cmd);
				}
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.customCheckbox = { version: '0.6pa' }

	$.fn.extend({

		ajp$customCheckbox: function (options) {

			var defaults = {
				checkboxHeight: 13,
				radioHeight: 13
			}

			var opts = $.extend(defaults, options);

			return this.each(function(i, el) {
				if (el.type == 'checkbox' || el.type == 'radio') {
					var height = (el.type == 'radio' ? opts.radioHeight : opts.checkboxHeight)
					var $span = $('<span class="ajp-customcheckbox-' + el.type + '"></span>')
					$(el).css('display', 'none')
						.addClass('ajp-customcheckbox')
						.before($span)
						.change(function () {
							if (el.disabled && !$span.hasClass('ajp-customcheckbox-disabled'))
								$span.addClass('ajp-customcheckbox-disabled')
							if (!el.disabled && $span.hasClass('ajp-customcheckbox-disabled'))
								$span.removeClass('ajp-customcheckbox-disabled')
							if (el.type == 'radio' && el.name)
								$('input[name=' + el.name + ']').each(function () {
									$(this).prev().css('background-position', '0 ' + (this.checked ? -height * 2 : 0) + 'px')
								})
							$span.css('background-position', '0 ' + (el.checked ? -height * 2 : 0) + 'px')
						})
						.change()
					$span.mousedown(function () {
						if (!el.disabled)
							$(this).css('background-position', '0 -' + (el.checked ? height * 3 : height) + 'px')
					})
					$span.mouseup(function () {
						if (!el.disabled) {
							el.checked = !el.checked
							$(el).change()
						}
					})
				}
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	if ($.ajp.customSelect)
		return
	$.ajp.customSelect = { version: '0.14pa', initialized: false, contexts: {}, serial: 1 }

	$.fn.extend({

		ajp$customSelect: function (options) {

			var defaults = {
				event: 'click',
				hideTimeout: 0
			}

			var options = $.extend(defaults, options);

			return this.each(function(i, el) {

				var api = {

					element: $(el),
					custom: null,
					currentValue: null,
					valueToIndex: {},
					indexToValue: [],
					timer: null,

					cancelEvent: function (evt) {
						if (!evt) return;
						evt.cancelBubble = true;
						if (evt.stopPropagation) {
							evt.stopPropagation();
							evt.preventDefault();
						}
					},

					init: function () {

						var ths = this

						if (!$.ajp.customSelect.initialized) {
							$.ajp.customSelect.initialized = true
							$(document).find('body:eq(0)').keydown(function (evt) {
								if (evt.keyCode == 27)
									$('.ajp-customselect > .list').css({ visibility: 'hidden' })
							})
							$(document).find('body:eq(0)').mouseup(function (evt) {
								if (evt.button == ($.browser.msie ? 1 : 0)) $('.ajp-customselect > .list').each(function () {
									var $list = $(this)
									var vis = $list.css('visibility')
									$list.data('ajp-customselect-visible', (vis == 'hidden' ? 'no' : 'yes'))
									$list.css({ visibility: 'hidden' })
								})
							})
						}

						var html = '';
						html += '<div class="ajp-customselect">'
						html += '<input class="current" readonly="readonly"/>'
						html += '<div class="control"></div>'
						html += '<div class="clear"></div>'
						html += '<div class="list"></div>'
						html += '</div>'

						this.element.css({ display: 'none' }).after(html)
						this.custom = this.element.next('.ajp-customselect:eq(0)').attr('class', 'ajp-customselect ' + ths.element.attr('class'))

						function openList() {
							if (!ths.custom.hasClass('ajp-customselect-disabled')) {
								var list = ths.custom.find('.list:eq(0)')
								var vis = (list.data('ajp-customselect-visible') == 'yes' ? 'hidden' : 'visible')
								if (vis == 'visible') {
									$('.ajp-customselect > .list').css({ visibility: 'hidden' })
									var top = 0
									var item = list.find('.selected')
									do {
										item = item.prev()
										top += item.outerHeight()
									} while (!item.hasClass('top'))
									list.scrollTop(top)
								}
								list.css({ visibility: vis })
							}
						}

						this.custom.find('.current:eq(0), .control:eq(0)').bind(options.event, openList)

						this.custom.attr('title', this.element.attr('title'))

						this.sync()

						this.element.change(function () {
							ths.setValue($(this).val())
						})
						var serial = ($.ajp.customSelect.serial ++)
						$.ajp.customSelect.contexts[serial] = this
						this.element.data('ajp-customselect-id', serial)
						this.custom.children('.list:eq(0)').data('ajp-customselect-visible', 'no')

						if (options.hideTimeout) {
							this.custom.mouseover(function () {
								if (ths.timer) {
									clearTimeout(ths.timer)
									ths.timer = null
								}
							})
							this.custom.mouseout(function () {
								if (!ths.timer) {
									ths.timer = setTimeout(function () {
										ths.custom.children('.list:eq(0)').css({ visibility: 'hidden' })
									}, options.hideTimeout)
								}
							})
						}
					},

					sync: function () {

						var ths = this

						ths.valueToIndex = {}
						ths.indexToValue = []

						var selOpt = null
						var html = '<div class="top"></div>';
						this.element.find('option').each(function (i) {
							var opt = $(this)
							if (!selOpt || opt.attr('selected')) selOpt = opt
							html += '<div class="item' + (opt.attr('selected') ? ' selected' : '') + '"' + (opt.attr('style') ? ' style="' + opt.attr('style') + '"' : '') + '>'
							html += (opt.data('ajp-customselect-html') ? opt.data('ajp-customselect-html') : (opt.attr('label') ? opt.attr('label') : opt.text()))
							html += '</div>'
							var val = opt.attr('value')
							ths.valueToIndex[val] = i
							ths.indexToValue[i] = val
						})
						html += '</div>'
						html += '<div class="bottom"></div></div>'
						this.custom.children('.list:eq(0)').html(html)

						if (selOpt) this.selectItem(selOpt.attr('value'))

						this.custom.find('.list:eq(0) > .item').each(function (i) {
							$(this).click(function (evt) {
								ths.selectItem(ths.indexToValue[i])
							})
						})

						if (this.element.attr('disabled'))
							this.custom.addClass('ajp-customselect-disabled')
						else
							this.custom.removeClass('ajp-customselect-disabled')
					},

					setValue: function (val) {
						if (this.currentValue != val) {
							this.currentValue = val
							this.invalidate()
						}
					},

					selectItem: function (val) {
						this.setValue(val)
						this.element.change()
					},

					invalidate: function () {
						var list = this.custom.find('.list:eq(0)')
						list.find('.selected').removeClass('selected')
						var item = list.find('.item:eq(' + this.valueToIndex[this.currentValue] + ')').addClass('selected')
						this.custom.find('.current:eq(0)').val(item.text())
						list.css({ visibility: 'hidden' })
						this.element.val(this.currentValue)
					}
				}

				api.init()
			})
		},

		ajp$customSelectContext: function () {
			if (this.length) {
				var serial = $(this[0]).data('ajp-customselect-id')
				return $.ajp.customSelect.contexts[serial]
			}
			return null
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.datepicker = { version: '0.5pa', installed: false }

	$.fn.extend({

		ajp$datepicker: function (options) {

			var defaults = {

				displayFormat: 'yyyy-mm-dd',
				valueFormat: 'yyyy-mm-dd',
				value: function ($el) { var d = $el.val(); if (!d) d = new Date(); return d },
				show: function ($el, $ctl) {
					$ctl.css({
						visibility: 'visible',
						left: '' + $el.offset().left + 'px',
						top: '' + ($el.offset().top + $el.outerHeight()) + 'px'
					})
				},
				hide: function ($el, $ctl) {
					$ctl.css({
						visibility: 'hidden'
					})
				},
				update: function ($el, $vel, date) {
					$vel.val(formatDate(opts.displayFormat, date))
					$el.val(formatDate(opts.valueFormat, date)).change()
				},

				months: [ 'Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь' ],
				monthsFmt: [ 'Января', 'Февраля', 'Марта', 'Апреля', 'Мая', 'Июня', 'Июля', 'Августа', 'Сентября', 'Октября', 'Ноября', 'Декабря' ],
				monthsShort: [ 'Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек' ],
				days: [ 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс' ]
			}

			var opts = $.extend(defaults, options)

			function indexOf(v) {
				for(var i = 0; i < this.length; i++)
					if (this[i] == v)
						return i
				return -1
			}

			if ($.browser.msie && !opts.months.indexOf)
				Array.prototype.indexOf = indexOf

			function formatDate(fmt, date) {
				var dateformat = {
					'd': function (d) { return d.getDate() },
					'dd': function (d) { var r = d.getDate(); return (r < 10 ? '0' + r : r) },
					'm': function (d) { return d.getMonth() + 1 },
					'mm': function (d) { var r = d.getMonth() + 1; return (r < 10 ? '0' + r : r) },
					'mmm': function (d) { return opts.monthsShort[d.getMonth()] },
					'mmmm': function (d) { return opts.monthsFmt[d.getMonth()] },
					'yy': function (d) { var r = d.getYear() - ($.browser.msie ? 2000 : 100); return (r < 10 ? '0' + r : r) },
					'yyyy': function (d) { return d.getYear() + ($.browser.msie ? 0 : 1900) }
				}
				var res = ''
				while (fmt.length > 0) {
					var m = fmt.match(/^(yyyy|yy|mmmm|mmm|mm|m|dd|d)(.*)$/, fmt)
					if (m) {
						res += dateformat[m[1]](date)
						fmt = m[2]
					} else {
						res += fmt.charAt(0)
						fmt = fmt.substr(1)
					}
				}
				return res
			}

			function parseDate(fmt, s) {
				function pInt(v) { return parseInt(v.replace(/^0+/, '')) }
				function pYear(v) { return pInt(v) + 2000 }
				function pMonthShort(v) { return opts.monthsShort.indexOf(v) + 1 }
				function pMonth(v) { return opts.monthsFmt.indexOf(v) + 1 }
				function parser(rx, d, fld, p) { var m = d.src.match(rx); d.src = m[2]; d[fld] = p(m[1]) }
				var dateformat = {
					'd': function (d) { parser(/^(\d\d?)(.*)/, d, 'day', pInt) },
					'dd': function (d) { parser(/^(\d\d)(.*)/, d, 'day', pInt) },
					'm': function (d) { parser(/^(\d\d?)(.*)/, d, 'month', pInt) },
					'mm': function (d) { parser(/^(\d\d)(.*)/, d, 'month', pInt) },
					'mmm': function (d) { parser(/^(...)(.*)/, d, 'month', pMonthShort) },
					'mmmm': function (d) { parser(new RegExp('^(' + opts.monthsFmt.join('|') + ')(.*)'), d, 'month', pMonth) },
					'yy': function (d) { parser(/^(\d\d)(.*)/, d, 'year', pYear) },
					'yyyy': function (d) { parser(/^(\d\d\d\d)(.*)/, d, 'year', pInt) }
				}
				var d = { src: s }
				while (fmt.length > 0) {
					var m = fmt.match(/^(yyyy|yy|mmmm|mmm|mm|m|dd|d)(.*)$/, fmt)
					if (m) {
						dateformat[m[1]](d)
						fmt = m[2]
					} else {
						d.src = d.src.substr(1)
						fmt = fmt.substr(1)
					}
				}
				return d
			}

			return this.each(function(i, el) {

				var $el = $(el)
				var yearShift = ($.browser.msie ? 0 : 1900)

				var $vel = $('<input type="' + $el.attr('type') + '"/>')

				var attrs = ['class', 'title']
				for (var a = 0; a < attrs.length; a ++) {
					var attr = $el.attr(attrs[a])
					if (attr) $vel.attr(attrs[a], attr)
				}

				$el.after($vel)
				$el.css('display', 'none')

				var $control = $( ''
					+ '<div class="ajp-datepicker">'
						+ '<div class="ajp-datepicker-header">'
							+ '<div class="ajp-datepicker-prev"></div>'
							+ '<div class="ajp-datepicker-month-name"></div>'
							+ '<div class="ajp-datepicker-next"></div>'
						+ '</div>'
						+ '<table class="ajp-datepicker-month">'
							+ '<tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr>'
						+ '</table>'
						+ '<div class="ajp-datepicker-footer">'
							+ '<div class="ajp-datepicker-clear"></div>'
						+ '</div>'
					+ '</div>'
				).css({
					visibility: 'hidden',
					position: 'absolute'
				})

				$control.find('.ajp-datepicker-month > tbody > tr > th').each(function (day) {
					$(this).text(opts.days[day])
				})

				$('body').append($control)

				if (!$.ajp.datepicker.installed) {
					$.ajp.datepicker.installed = true
					$(document).find('body:eq(0)').keydown(function (evt) {
						if (evt.keyCode == 27)
							$('.ajp-datepicker').css({ visibility: 'hidden' })
					})
					$(document).find('body:eq(0)').mouseup(function (evt) {
						if (evt.button == ($.browser.msie ? 1 : 0)) $('.ajp-datepicker').each(function () {
							var $c = $(this)
							var vis = $c.css('visibility')
							$c.data('ajp-datepicker-visible', (vis == 'hidden' ? 'no' : 'yes'))
							$c.css({ visibility: 'hidden' })
						})
					})
				}

				function getSelectedDate() {
					var d = (typeof opts.value == 'function' ? opts.value($el) : opts.value)
					if (typeof d == 'object' && d instanceof Date)
						return d
					d = parseDate(opts.valueFormat, d)
					return new Date(d.year, d.month - 1, d.day)
				}

				function visualize(date) {
					var sdate = getSelectedDate()
					$control.find('.ajp-datepicker-month-name').text('' + opts.months[date.getMonth()] + ', ' + (date.getYear() + yearShift))
					$control.find('.ajp-datepicker-month > tbody > tr').each(function (tr) { if (tr) $(this).remove() })
					var now = new Date()
					now = new Date(now.getYear() + yearShift, now.getMonth(), now.getDate())
					var wdays = [ 6, 0, 1, 2, 3, 4, 5 ]
					var lastDay = new Date(date.getYear() + yearShift, date.getMonth() + 1, 0).getDate()
					var $tr = false
					for (var day = 1; day <= lastDay; day ++) {
						var wday = wdays[new Date(date.getYear() + yearShift, date.getMonth(), day).getDay()]
						if (!$tr) $tr = $('<tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr>')
						var cdate = new Date(date.getYear() + yearShift, date.getMonth(), day)
						var $td = $tr.find('td:eq(' + wday + ')').text(day).data('date', cdate)
						if (cdate.getTime() == sdate.getTime())
							$td.addClass('selected')
						if (cdate.getTime() == now.getTime())
							$td.addClass('now')
						if (wday == 6) {
							$control.find('.ajp-datepicker-month > tbody > tr:last').after($tr)
							$tr = false
						}
					}
					if ($tr) $control.find('.ajp-datepicker-month > tbody > tr:last').after($tr)
					$control.data('visualized-date', date)
					$control.find('.ajp-datepicker-month > tbody > tr > td').click(function () {
						if ($(this).text()) {
							opts.update($el, $vel, new Date($(this).data('date')))
							opts.hide($el, $control)
						}
					})
				}

				$control.find('.ajp-datepicker-prev').mouseup(function (evt) {
					var date = new Date($control.data('visualized-date'))
					date = new Date(date.getYear() + yearShift, date.getMonth() - 1, 1)
					visualize(date)
					evt.preventDefault()
					return false
				})

				$control.find('.ajp-datepicker-next').mouseup(function (evt) {
					var date = new Date($control.data('visualized-date'))
					date = new Date(date.getYear() + yearShift, date.getMonth() + 1, 1)
					visualize(date)
					evt.preventDefault()
					return false
				})

				$control.find('.ajp-datepicker-clear').mouseup(function (evt) {
					$vel.val('')
					$el.val('').change()
				})

				$vel.attr('readonly', true).click(function () {
					var vis = ($control.data('ajp-datepicker-visible') == 'yes' ? 'hidden' : 'visible')
					if (vis == 'visible') {
						visualize(getSelectedDate())
						opts.show($vel, $control)
					} else {
						opts.hide($vel, $control)
					}
				})

				if ($el.val())
					opts.update($(), $vel, getSelectedDate())
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.dragndrop = { version: '0.10pa' }

	$.fn.extend({

		ajp$dragout: function (options) {

			var defaults = {
				downloadurl: 'downloadurl'
			}

			var options = $.extend(defaults, options)

			this.each(function (i, el) {
				el.addEventListener('dragstart', function(evt) {
					var url = (typeof options.downloadurl == 'function' ? options.downloadurl(el) : $(el).data(options.downloadurl))
					evt.dataTransfer.setData('DownloadURL', url);
				}, false)
			})
		},

		ajp$dragndrop: function (options) {

			var defaults = {

				getUploadUrl: function (file, el) { return './upload/?name=' + encodeURIComponent(file.fileName) },

				onload: function (file, el, xhr) { },
				ondrop: function (obj, type, api) {
					if (type == 'file')
						api.uploadFile(obj);
				}
			}

			var options = $.extend(defaults, options);

			return this.each(function(i, el) {

				var api = {

					element: el,

					cancelEvent: function (evt) {
						if (!evt) return;
						evt.cancelBubble = true;
						if (evt.stopPropagation) {
							evt.stopPropagation();
							evt.preventDefault();
						}
					},

					matchDataTransferType: function (types, type) {
						if (types.contains)
							return types.contains(type);
						return new RegExp("\\b" + type + "\\b").test('' + types);
					},

					uploadFile: function (file) {
						var xhr = new XMLHttpRequest();
						xhr.onreadystatechange = function() {
							var request = xhr;
							if (request.readyState == 4 && request.status == 200)
								options.onload(file, el, request)
						}
						xhr.open('POST', options.getUploadUrl(file, el));
						xhr.send(file);
					}
				}

				if (!/explorer/i.test(navigator.appName)) {

					el.addEventListener('dragenter', function(evt) { api.cancelEvent(evt) }, false);
					el.addEventListener('dragover', function(evt) { api.cancelEvent(evt) }, false);
					el.addEventListener('drop', function (evt) {

						var dt = evt.dataTransfer;

						evt.stopPropagation();
						evt.preventDefault();

						if (api.matchDataTransferType(dt.types, 'Files')) {
							for (var i = 0; i < dt.files.length; i++)
								api.uploadFile(dt.files[i]);
						} else if (api.matchDataTransferType(dt.types, 'text/uri-list')) { // URL
							var u = dt.getData('URL');
							if (/(je?pg|png|gif|bmp)$/i.test(u)) {
								options.ondrop(u, 'image', api)
							} else {
								options.ondrop(u, 'url', api)
							}
						}

					}, false);
				}
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

if (!$.ajp) $.ajp = { };
$.ajp.easing = { version: '0.1pa' };

$.easing['ajp-easing'] = function(x, t, b, c, d) {
	x = 1 - x
	return c * Math.sqrt(1 - x * x) + b
};

$.easing['ajp-elastic'] = function(x, t, b, c, d) {

	var c1 = c + (c - b) * 0.26
	var c2 = b + (c - b) * 0.87
	var c3 = c + (c - b) * 0.06
	var c4 = b + (c - b) * 0.96

	var n5 = d
	var n4 = n5 - (d / 4) / 2
	var n3 = n4 - (d / 4) / 2
	var n2 = n3 - (d / 4)
	var n1 = n2 - (d / 4)

	if (t < n1) {
		c = c1
		return b + (c - b) * (t / n1)
	}

	if (t < n2) {
		b = c1
		c = c2
		return b + (c - b) * ((t - n1) / (n2 - n1))
	}

	if (t < n3) {
		b = c2
		c = c3
		return b + (c - b) * ((t - n2) / (n3 - n2))
	}

	if (t < n4) {
		b = c3
		c = c4
		return b + (c - b) * ((t - n3) / (n4 - n3))
	}

	if (t < n5) {
		b = c4
		return b + (c - b) * ((t - n4) / (n5 - n4))
	}

	return c
};

$.easing['ajp-bounce'] = function(x, t, b, c, d) {

	var c1 = b + (c - b) * 0.74
	var c2 = b + (c - b) * 0.96

	var n5 = d
	var n4 = n5 - (d / 4) / 2
	var n3 = n4 - (d / 4) / 2
	var n2 = n3 - (d / 4)
	var n1 = n2 - (d / 4)

	if (t < n1)
		return b + (c - b) * (t / n1)

	if (t < n2) {
		b = c
		c = c1
		return b + (c - b) * ((t - n1) / (n2 - n1))
	}

	if (t < n3) {
		b = c1
		return b + (c - b) * ((t - n2) / (n3 - n2))
	}

	if (t < n4) {
		b = c
		c = c2
		return b + (c - b) * ((t - n3) / (n4 - n3))
	}

	if (t < n5) {
		b = c2
		return b + (c - b) * ((t - n4) / (n5 - n4))
	}

	return c
};
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.editable = { version: '0.13pa', required: ['bindkeys'], editors: { } }

	$.fn.extend({

		ajp$uneditable: function (options) {

			var defaults = {
				uneditable: function (api) {}
			}

			var options = $.extend(defaults, options);

			$(this).each(function (i, el) {
				var id = $(el).attr('id');
				if (id && $.ajp.editable.editors[id]) {
					$(el).attr('contentEditable', false)
					options.uneditable($.ajp.editable.editors[id])
				}
			})
		},

		ajp$editable: function (options) {

			var defaults = {

				hotkeys: {

					'Ctrl+b': 'bold',
					'Ctrl+s': 'strike',
					'Ctrl+i': 'italic',
					'Ctrl+u': 'underline',

					'Ctrl+1': 'h1',
					'Ctrl+2': 'h2',
					'Ctrl+3': 'h3',
					'Ctrl+4': 'h4',
					'Ctrl+5': 'h5',
					'Ctrl+6': 'h6',

					'Ctrl+r': 'text',
					'Ctrl+l': 'anchor'
				},

				init: function (el, api) {}
			}

			var options = $.extend(defaults, options);

			var randomId = function (prefix, n) {
				var a = 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890'
				var id = prefix;
				for (var i = 0; i < n; i ++)
					id += a.charAt(parseInt(a.length * Math.random()))
				return id;
			}

			return this.each(function(i, el) {

				var api = {

					element: el,

					original: el.innerHTML,

					cancelEvent: function (evt) {
						if (!evt) return;
						evt.cancelBubble = true;
						if (evt.stopPropagation) {
							evt.stopPropagation();
							evt.preventDefault();
						}
					},

					range: null,

					saveSelection: function() {
						try {
							this.range = (window.getSelection ? window.getSelection().getRangeAt(0) : document.selection.createRange())
						} catch (ex) {
						}
					},

					restoreSelection: function() {
						if (!this.range)
							return;
						if (window.getSelection) {
							var sel = window.getSelection();
							if (sel.rangeCount > 0) 
								sel.removeAllRanges();
							sel.addRange(this.range);
						} else if (document.selection) {
							this.range.select();
						}
					},

					getSelectedHtml: function () {
						var userSelection;
						if (window.getSelection) {
							// W3C Ranges
							userSelection = window.getSelection();
							// Get the range:
							if (userSelection.getRangeAt)
								var range = userSelection.getRangeAt (0);
							else {
								var range = document.createRange();
								range.setStart(userSelection.anchorNode, userSelection.anchorOffset);
								range.setEnd(userSelection.focusNode, userSelection.focusOffset);
							}
							// And the HTML:
							var clonedSelection = range.cloneContents();
							var div = document.createElement('div');
							div.appendChild(clonedSelection);
							return div.innerHTML;
						} else if (document.selection) {
							// Explorer selection, return the HTML
							userSelection = document.selection.createRange();
							return userSelection.htmlText;
						} else {
							return '';
						}
					},

					selectNode: function (node) {
						var range = document.createRange();
						range.selectNode(node);
						var selection = window.getSelection();
						selection.removeAllRanges();
						selection.addRange(range);
					},

					replaceSelection: function (html) {
						if (/explorer/i.test(navigator.appName)) {
							var range = document.selection.createRange()
							range.pasteHTML(html)
						} else {
							var node = $(html)[0]
							var selection = window.getSelection();
							var range = selection.getRangeAt(0);
							range.deleteContents();
							range.insertNode(node);
							api.selectNode(node);
						}
					},

					createAnchor: function (url, html) {
						if (!url) return;
						if (!html) html = url;
						var html = this.getSelectedHtml();
						if (/explorer/i.test(navigator.appName)) {
							var range = document.selection.createRange()
							range.pasteHTML('<a href="' + url + '">' + html + '</a>');
						} else {
							var node = document.createElement('a');
							node.href = url;
							node.innerHTML = html;
							var selection = window.getSelection();
							var range = selection.getRangeAt(0);
							range.deleteContents();
							range.insertNode(node);
							this.selectNode(node);
						}
					},

					pasteHtml: function (html) {
						if (/explorer/i.test(navigator.appName)) {
							var range = document.selection.createRange()
							range.pasteHTML('<span class="editable-not-initialized">' + html + '</span>');
							options.init(
								$(el).find('span.editable-not-initialized')
								.removeClass('editable-not-initialized')[0],
								this
							)
						} else {
							var node = document.createElement('span');
							node.innerHTML = html;
							options.init(node, this);
							var selection = window.getSelection();
							var range = selection.getRangeAt(0);
							range.deleteContents();
							range.insertNode(node);
							this.selectNode(node);
						}
					}
				}

				var defaultCommands = {

					h1: function (evt, ctx) {
						ctx.cancelEvent(evt)
						evt.returnValue = false
						ctx.replaceSelection('<h1>' + ctx.getSelectedHtml() + '</h1>')
						return false
					},

					h2: function (evt, ctx) {
						ctx.cancelEvent(evt)
						evt.returnValue = false
						ctx.replaceSelection('<h2>' + ctx.getSelectedHtml() + '</h2>')
						return false
					},

					h3: function (evt, ctx) {
						ctx.cancelEvent(evt)
						evt.returnValue = false
						ctx.replaceSelection('<h3>' + ctx.getSelectedHtml() + '</h3>')
						return false
					},

					h4: function (evt, ctx) {
						ctx.cancelEvent(evt)
						evt.returnValue = false
						ctx.replaceSelection('<h4>' + ctx.getSelectedHtml() + '</h4>')
						return false
					},

					h5: function (evt, ctx) {
						ctx.cancelEvent(evt)
						evt.returnValue = false
						ctx.replaceSelection('<h5>' + ctx.getSelectedHtml() + '</h5>')
						return false
					},

					h6: function (evt, ctx) {
						ctx.cancelEvent(evt)
						evt.returnValue = false
						ctx.replaceSelection('<h6>' + ctx.getSelectedHtml() + '</h6>')
						return false
					},

					bold: function (evt, api) {

						api.cancelEvent(evt);
						evt.returnValue = false;

						api.replaceSelection('<b>' + api.getSelectedHtml() + '</b>')			

						return false;
					},

					italic: function (evt, api) {

						api.cancelEvent(evt);
						evt.returnValue = false;
				
						api.replaceSelection('<i>' + api.getSelectedHtml() + '</i>')

						return false;
					},

					underline: function (evt, api) {

						api.cancelEvent(evt);
						evt.returnValue = false;
				
						api.replaceSelection('<u>' + api.getSelectedHtml() + '</u>')

						return false;
					},

					strike: function (evt, api) {

						api.cancelEvent(evt);
						evt.returnValue = false;
				
						api.replaceSelection('<span style="text-decoration: line-through;">' + api.getSelectedHtml() + '</span>')

						return false;

					},

					text: function (evt, api) {

						api.cancelEvent(evt);
						evt.returnValue = false;

						if (/explorer/i.test(navigator.appName)) {
							var range = document.selection.createRange();
							range.pasteHTML(range.text.replace(/\&/g, '&amp;').replace(/\</g, '&lt;').replace(/\>/g, '&gt;'));
						} else {			
							var selection = window.getSelection();
							var node = document.createElement('span');
							node.textContent = selection.toString();
							var range = selection.getRangeAt(0);
							range.deleteContents();
							range.insertNode(node);
							selection.selectAllChildren(node);
						}

						return false;
					},

					anchor: function (evt, api) {

						api.cancelEvent(evt);
						evt.returnValue = false;

						api.createAnchor(prompt('URL', 'http://'), api.getSelectedHtml());

						return false;
					}
				}

				$(el).attr('contentEditable', true)

				var hotkeysToBind = {}
				$.each(options.hotkeys, function (key, cmd) {
					if (typeof cmd == 'string')
						cmd = defaultCommands[cmd];
					if (typeof cmd == 'function')
						hotkeysToBind[key] = function (evt) {
							if (!el.contentEditable)
								return;
							cmd(evt, api)
						}
				})
				$(el).ajp$bindkeys(hotkeysToBind)

				if (!el.id)
					el.id = randomId('editable-autogenerated-id-', 16);
				$.ajp.editable.editors[el.id] = api;

				options.init(el, api)
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.menu = { version: '0.6pa', current: null }

	$.fn.extend({

		ajp$menu: function (options) {

			var defaults = {
				show: function ($ul) {
					$ul.parents('li:eq(0)').addClass('selected')
					if ($.browser.msie) {
						$ul.css({ display: 'block' })
					} else {
						$ul.find('.arrow').css({ display: 'none' })
						$ul.css({ opacity: 0, display: 'block' })
					}
					if (!$ul.data('initial-width'))
						$ul.data('initial-width', $ul.width())
					if (!$.browser.msie) {
						$ul.css({ width: 0 }).animate({ opacity: 1, width: $ul.data('initial-width') }, 'fast', 'swing', function () {
							$ul.find('.arrow').css({ opacity: 0, display: 'block' }).animate({ opacity: 1 }, 'fast', 'swing')
						})
					}
				},
				hide: function ($ul) {
					$ul.find('li').removeClass('selected')
					$ul.parents('li:eq(0)').removeClass('selected')
					if ($.browser.msie) {
						$ul.css('display', 'none')
					} else {
						$ul.animate({ opacity: 0 }, 'fast', 'swing', function () {
							$ul.css('display', 'none')
						})
					}
				}
			}

			var opts = $.extend(defaults, options);

			function makeMenu($li, level) {
				var $a = $li.children('a:eq(0)')
				var $ul = $li.children('ul:eq(0)')
				var hasSubmenu = ($ul.length ? true : false)
					
				if (hasSubmenu) {

					function closeSubmenu() {
						if ($ul.css('display') != 'none')
							opts.hide($ul)
					}

					$('body').click(function () {
						closeSubmenu()
					}).keydown(function (evt) {
						if (evt.keyCode == 27)
							closeSubmenu()
					})

					if (level && $a.find('.arrow:eq(0)').length == 0)
						$a.append('<span class="arrow">&raquo;</span>')

					$li.bind('click', function (evt) {
						var vis = ($ul.css('display') == 'none' ? true : false)
						$li.parent().children('li').children('ul').each(function () {
							if ($(this).css('display') != 'none')
								opts.hide($(this))
						})
						$ul.find('ul').css('display', 'none')
						if (level && vis) {
							$ul.css({
								'margin-top': '-' + ($li.outerHeight() - parseInt($li.css('padding-top'))) + 'px',
								'margin-left': '' + ($li.outerWidth() - parseInt($li.css('padding-left'))) + 'px'
							})
						}
						if (vis) {
							opts.show($ul)
							evt.preventDefault()
							return false
						} else {
							opts.hide($ul)
						}
					})

					$ul.children('li').each(function () {
						makeMenu($(this), level + 1)
					})
				}
			}

			return this.each(function() {
				$(this).removeClass('ajp-menu-noscript').addClass('ajp-menu').children('li').each(function () {
					makeMenu($(this), 0)
				})
				if (!$(this).children('li.clear').length)
					$(this).append('<li class="clear"></li>')
			})
		}
	})

})(jQuery);
/*
 * $Id$
 *
 * Fork of version 3.0.4 (Author of original - Brandon Aaron http://brandonaaron.net)
 *
 * Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers.
 * Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix.
 * Thanks to: Seamus Leahy for adding deltaX and deltaY
 * 
 * Licensed under the MIT License (LICENSE.txt).
 * 
 */

(function($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.mousewheel = { version: '0.1a' }

	function handler(event) {

		var orgEvent = event || window.event,
			args = [].slice.call( arguments, 1 ),
			delta = 0, returnValue = true,
			deltaX = 0,
			deltaY = 0;

		event = $.event.fix(orgEvent)
		event.type = "mousewheel"
    
		// Old school scrollwheel delta
		if ( event.wheelDelta ) { delta = event.wheelDelta/120 }
		if ( event.detail     ) { delta = -event.detail/3 }
    
		// New school multidimensional scroll (touchpads) deltas
		deltaY = delta
    
		// Gecko
		if (orgEvent.axis !== undefined && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
			deltaY = 0
			deltaX = -1 * delta
		}
    
		// Webkit
		if (orgEvent.wheelDeltaY !== undefined) { deltaY = orgEvent.wheelDeltaY / 120 }
		if (orgEvent.wheelDeltaX !== undefined) { deltaX = -1 * orgEvent.wheelDeltaX / 120 }
    
		// Add event and delta to the front of the arguments
		args.unshift(event, delta, deltaX, deltaY);
    
		return $.event.handle.apply(this, args);
	}

	$.event.special.mousewheel = {

		setup: function() {
			if (this.addEventListener) {
				this.addEventListener('DOMMouseScroll', handler, false)
				this.addEventListener('mousewheel', handler, false)
			} else {
				this.onmousewheel = handler
			}
		},
    
		teardown: function() {
			if (this.removeEventListener) {
				this.removeEventListener('DOMMouseScroll', handler, false)
				this.removeEventListener('mousewheel', handler, false)
			} else {
				this.onmousewheel = null
			}
		}
	}

	$.fn.extend({

		mousewheel: function (fn) {
			return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel")
		},

		unmousewheel: function (fn) {
			return this.unbind("mousewheel", fn)
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.msgbox = { version: '0.5pa', queue: [] }

	$.fn.extend({

		ajp$msgbox: function (text, options, handler) {

			var defaults = {
				type: 'info', // alert | confirm | info | error | prompt | none
				buttons: [
					{ value: 'OK' }
				],
				inputs: [
					{ type: 'text' }
				],
				background: '#000',
				opacity: 0.5,
				setIcon: function ($msgbox, icon) { $msgbox.find('.icon').addClass(icon) },
				setText: function ($msgbox, html) { $msgbox.find('.text').html(html) },
				addButton: function ($msgbox, $btn) { $msgbox.find('.buttons').append($btn) },
				classes: '',
				template: function (opts) { return $(''
					+ '<div class="ajp-msgbox ' + opts.classes + '">'
						+ '<div class="top"></div>'
						+ '<div class="middle">'
							+ '<div class="icon"></div>'
							+ '<div class="text"></div>'
							+ '<div class="clear"></div>'
						+ '</div>'
						+ '<div class="bottom">'
							+ '<div class="buttons"></div>'
						+ '</div>'
					+ '</div>'
					)
				},
				show: function ($msgbox, $shade) {
					$shade.css({ visibility: 'visible' })
					$msgbox.css({
						'margin-top': '-' + parseInt($msgbox.outerHeight() + parseInt(screen.height)).toString() + 'px',
						'margin-left': '-' + parseInt($msgbox.outerWidth() / 2).toString() + 'px',
						visibility: 'visible'
					})
					$msgbox.find('.text:eq(0) > .input:eq(0) > input:eq(0)').focus()
					$msgbox.animate({
						'margin-top': '-' + parseInt($msgbox.outerHeight() / 2).toString() + 'px'
					}, 'fast', 'swing')
				},
				notReady: function ($msgbox) {
					var d = 20
					$msgbox.css({
						'margin-left': '-' + parseInt($msgbox.outerWidth() / 2 - d).toString() + 'px',
						visibility: 'visible'
					}).animate({
						'margin-left': '-' + parseInt($msgbox.outerWidth() / 2 + d).toString() + 'px'
					}, 'fast', 'swing').animate({
						'margin-left': '-' + parseInt($msgbox.outerWidth() / 2 - d).toString() + 'px'
					}, 'fast', 'swing').animate({
						'margin-left': '-' + parseInt($msgbox.outerWidth() / 2).toString() + 'px'
					}, 'fast', 'swing')
				},
				hide: function ($msgbox, $shade) {
					$msgbox.css({ visibility: 'hidden' })
					$shade.css({ visibility: 'hidden' })
				}
			}

			var buttonDefaults = {
				type: 'submit', // submit | cancel
				value: 'OK'
			}

			var inputDefaults = {
				type: 'text',
				label: '',
				value: '',
				required: false
			}

			var opts = $.extend(defaults, options);

			if (!$.ajp.msgbox.shade) {
				$.ajp.msgbox.shade = $('<div class="ajp-msgbox-shade"></div>').css({
					background: opts.background,
					position: 'fixed',
					left: '0',
					top: '0',
					width: '100%',
					height: '100%',
					opacity: opts.opacity,
					visibility: 'hidden'
				})
				$.ajp.msgbox.shade.appendTo('body')
			}

			var $tmpl = (typeof opts.template == 'function' ? opts.template(opts) : $(opts.template))
			$tmpl.data('ajp-msgbox-type', opts.type)
			opts.setIcon($tmpl, opts.type)
			if (opts.type == 'prompt') {
				$.each(opts.inputs, function () {
					var inp = $.extend(inputDefaults, this)
					text += (inp.label ? '<div class="label">' + inp.label + '</div>' : '')
						+ '<div class="input"><input type="' + inp.type + '" data-ajp-msgbox-required="' + (inp.required ? 'true' : 'false') + '" value="' + (inp.value.replace(/"/g, '&quot;')) + '"/></div>'
				})
			}
			opts.setText($tmpl, text)
			$.each(opts.buttons, function () {
				var btn = $.extend(buttonDefaults, this)
				var $btn = $('<button data-ajp-msgbox-type="' + btn.type + '"></button>').text(btn.value).click(function () {
					var res = []
					var $t = $.ajp.msgbox.queue.pop()
					var canceled = false
					var ready = true
					if ($tmpl.data('ajp-msgbox-type') == 'prompt') {
						var $empty = null
						$tmpl.find('.text > .input > input').each(function () {
							var $inp = $(this)
							var val = $inp.val()
							if (/^true$/i.test($inp.data('ajp-msgbox-required')) && val == '') {
								ready = false
								if (!$empty)
									$empty = $inp
							} else {
								res.push(val)
							}
						})
						if (/^cancel$/i.test($(this).data('ajp-msgbox-type'))) {
							ready = true
							canceled = true
						} else {
							if (ready == false && $empty)
								$empty.focus()
						}
					}
					if (ready) {
						opts.hide($tmpl, $.ajp.msgbox.shade)
						if (!canceled) {
							if (handler) {
								res.unshift($btn.text())
								handler.apply(handler, res)
							}
						} else {
							handler.apply(handler, [ false ])
						}
						if ($.ajp.msgbox.queue.length >= 1)
							opts.show($.ajp.msgbox.queue[$.ajp.msgbox.queue.length - 1], $.ajp.msgbox.shade)
					} else {
						opts.notReady($tmpl)
					}
					$tmpl.remove()
				})
				opts.addButton($tmpl, $btn)
			})
			$tmpl.css({ position: 'fixed', top: '50%', left: '50%', visibility: 'hidden' }).appendTo('body')

			$.ajp.msgbox.queue.unshift($tmpl)
			if ($.ajp.msgbox.queue.length == 1)
				opts.show($.ajp.msgbox.queue[0], $.ajp.msgbox.shade)
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.paginator = { version: '0.4pa', required: ['scrollable'] }

	$.fn.extend({

		ajp$paginator: function (options) {

			var defaults = {
				current: 1,
				portion: 5,
				total: 10,
				baseUrl: './?page=%page%',

				duration: 'fast',
				easing: 'linear',
				mousewheel: false,
				orientation: 'horizontal',
				prev: 'prev',
				next: 'next'
			}

			var options = $.extend(defaults, options);

			return this.each(function(i, el) {
				var currentItem = 0;
				var html = ''
				+ '<a class="prev' + (options.current > 1 ? '" href="' + options.baseUrl.replace(/\%page\%/g, options.current - 1) + '"' : ' disabled"') + '>' + options.prev + '</a>'
				+ '<div class="ajp-scrollable">'
				+ '	<ul>'
				for (var p = 1, i = 0; p <= options.total; i ++) {
					html += '<li>'
					for (var j = 0; j < options.portion; p ++, j ++) {
						html += '<a href="' + options.baseUrl.replace(/\%page\%/g, p) + '"' + (p == options.current ? ' class="selected"' : (p > options.total ? ' class="disabled"' : '')) + '>' + p + '</a>'
						if (p == options.current)
							currentItem = i
					}
					html += '</li>'
				}
				html += ''
				+ '	</ul>'
				+ '</div>'
				+ '<a class="next' + (options.current < options.total ? '" href="' + options.baseUrl.replace(/\%page\%/g, options.current + 1) + '"' : ' disabled"') + '>' + options.next + '</a>'
				$(el).html(html).ajp$scrollable({
					duration: options.duration,
					easing: options.easing,
					mousewheel: options.mousewheel,
					orientation: options.orientation,
					prev: '.prev',
					next: '.next',
					current: currentItem
				})
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.placeholder = { version: '0.5pa', installed: false }

	$.fn.extend({

		ajp$placeholder: function (options) {

			var defaults = {
			}

			var opts = $.extend(defaults, options);

			if (!$.ajp.placeholder.installed) {
				var savedVal = $.fn.val
				$.fn.val = function (value) {
					if (typeof value == 'undefined')
						return ($(this).hasClass('ajp-placeholder') ? '' : savedVal.apply(this))
					if ($(this).hasClass('ajp-placeholder') && value != $(this).data('ajp-placeholder'))
						$(this).removeClass('ajp-placeholder')
					return savedVal.call(this, value)
				}
				$.ajp.placeholder.installed = true
			}

			return this.each(function () {

				var $el = $(this)
				var info = ($el.attr('placeholder') ? $el.attr('placeholder') : $el.data('ajp-placeholder'))

				$el.removeAttr('placeholder')
				$el.data('ajp-placeholder', info)
				$el.val(info)

				if (!$el.hasClass('ajp-placeholder'))
					$el.addClass('ajp-placeholder')

			}).focusin(function () {

				var $el = $(this)
				var info = $el.data('ajp-placeholder')

				if ($el.hasClass('ajp-placeholder') && this.value == info) {
					this.value = ''
					$el.removeClass('ajp-placeholder')
					if (!$el.attr('title')) {
						$el.attr('title', info)
						$el.data('ajp-placeholder-title', 1)
					}
				}

			}).focusout(function () {

				var $el = $(this)

				if (this.value == '') {
					var info = $el.data('ajp-placeholder')
					$el.addClass('ajp-placeholder')
					$el.val(info)
					if ($el.data('ajp-placeholder-title')) {
						$el.attr('title', '')
						$el.data('ajp-placeholder-title', 0)
					}
				}
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }

	$.ajp.resizable = {
		version: '0.7pa',
		installed: false,
		serial: 1,
		current: undefined,
		elements: {},
		mouse: {}
	}

	$.fn.extend({

		ajp$unresizable: function () {
			return this.each(function(i, el) {
				var id = $(el).data('ajp-resizable-id');
				if (id && $.ajp.resizable.elements[id]) {
					$.ajp.resizable.elements[id].disable()
				}
			})
		},

		ajp$resizable: function (options) {

			var defaults = {
				proportional: false,
				minWidth: 40,
				minHeight: 40
			}

			var options = $.extend(defaults, options);

			var cancelEvent = function (evt) {
				if (!evt) return;
				evt.cancelBubble = true;
				if (evt.stopPropagation) {
					evt.stopPropagation();
					evt.preventDefault();
				}
			}

			var root = $('html')[0]

			if (!$.ajp.resizable.installed) {
				$(document).mousedown(function (evt) {
					if ($.ajp.resizable.current) {
						$.ajp.resizable.mouse.down = true;
						$.ajp.resizable.mouse.x = evt.clientX;
						$.ajp.resizable.mouse.y = evt.clientY;
						$.ajp.resizable.current.width = $.ajp.resizable.current.target.outerWidth()
						$.ajp.resizable.current.height = $.ajp.resizable.current.target.outerHeight()
						$.ajp.resizable.mouse.sel = root.onselectstart
						root.onselectstart = function () { return false }
					}
				}).mouseup(function (evt) {
					cancelEvent(evt)
					$.ajp.resizable.mouse.down = false;
					$.ajp.resizable.current = undefined;
					root.onselectstart = $.ajp.resizable.mouse.sel
				}).mousemove(function (evt) {
					cancelEvent(evt)
					if ($.ajp.resizable.mouse.down) {
						var dx = evt.clientX - $.ajp.resizable.mouse.x;
						var dy = evt.clientY - $.ajp.resizable.mouse.y;
						if ($.ajp.resizable.current) {
							$.ajp.resizable.current.scale(dx, dy)
						}
					}
				})
				$.ajp.resizable.installed = true;
			}


			return this.each(function(i, el) {

				var api = {

					target: $(el),
					enabled: true,

					init: function () {

						var t = this.target;

						var id = t.data('ajp-resizable-id');
						if ($.ajp.resizable.elements[id]) {
							$.ajp.resizable.elements[id].enable();
							return;
						}

						$.ajp.resizable.elements[id] = this;

						var c = $(document.createElement('div'));
						var z = t.css('z-index').replace(/[^0-9]/g, '');
						z = (z ? parseFloat(z) : 0);
						this.control = c
							.addClass('ajp-resizable-control')
							.appendTo('body')
							.css({
								'z-index': z + 1,
								'position': 'absolute',
								'display': 'none'
							})
						;
						var ctx = this;
						t.mouseover(function (evt) {
							if (ctx.enabled) ctx.show()
						}).mouseout(function (evt) {
							ctx.hide()
						})
						c.mouseover(function (evt) {
							if (ctx.enabled) ctx.show()
						}).mouseout(function (evt) {
							ctx.hide()
						})
					},

					disable: function () { this.enabled = false; this.hide() },

					enable: function () { this.enabled = true },

					hide: function () {
						this.target.removeClass('ajp-resizable-active')
						this.control.css({ display: 'none' })
					},

					show: function () {
						var t = this.target;
						var c = this.control;
						var o = t.offset();
						$('.ajp-resizable-control').css({ display: 'none' })
						t.addClass('ajp-resizable-active')
						c.css({
							display: 'block',
							left: '' + (o.left + t.outerWidth() - c.outerWidth()) + 'px',
							top: '' + (o.top + t.outerHeight() - c.outerHeight()) + 'px'
						})
						$.ajp.resizable.current = this;
					},

					scale: function (dx, dy) {

						if (!this.enabled) return;

						if (options.proportional) {
							if (dx > dy) {
								var s = (this.width + dx) / this.width;
								dy = this.height * s - this.height;
							} else {
								var s = (this.height + dy) / this.height;
								dx = this.width * s - this.width;
							}
						}

						var newWidth = parseInt(this.width + dx)
						var newHeight = parseInt(this.height + dy)

						if (newWidth >= options.minWidth && newHeight >= options.minHeight) {
							this.target
								.width('' + newWidth + 'px')
								.height('' + newHeight + 'px')
						}

						this.show()
					}
				}

				var idx = $.ajp.resizable.serial ++
				$(el).data('ajp-resizable-id', idx)

				api.init();
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.scrollable = { version: '0.9pa', serial: 1, contexts: [] }

	$.fn.extend({

		ajp$scrollableContext: function () {
			if (this.length) {
				var serial = $(this[0]).data('ajp-scrollable-id')
				return $.ajp.scrollable.contexts[serial]
			}
			return null
		},

		ajp$scrollable: function (options) {

			var defaults = {
				duration: 'fast',
				easing: 'linear',
				mousewheel: false,
				orientation: 'horizontal',
				prev: '.ajp-scrollable-prev',
				next: '.ajp-scrollable-next',
				current: null
			}

			var defaultExtensible = {
				critical: 3,
				getUrl: function (offset) { return { url: './scrollable/', params: { 'offset': offset } } },
				getCount: function (response) { return response.items.length },
				getItem: function (response, i) { return response.items[i] }
			}

			var options = $.extend(defaults, options);

			if (options.extensible) {
				if (typeof options.extensible !== 'object')
					options.extensible = {}
				options.extensible = $.extend(defaultExtensible, options.extensible);
			}

			return this.each(function(i, el) {

				var api = {

					element: el,
					container: null,
					nItems: 0,
					canSelect: false,
					scrollLeft: 0,
					scrollTop: 0,

					cancelEvent: function (evt) {
						if (!evt) return;
						evt.cancelBubble = true;
						if (evt.stopPropagation) {
							evt.stopPropagation();
							evt.preventDefault();
						}
					},

					init: function () {

						var serial = ($.ajp.scrollable.serial ++)
						$.ajp.scrollable.contexts[serial] = this
						$(this.element).data('ajp-scrollable-id', serial).find('.ajp-scrollable').css({ overflow: 'hidden' })

						if ($(this.element).find('.ajp-scrollable > ul').length <= 0)
							$(this.element).find('.ajp-scrollable').append('<ul></ul>')

						this.container = $(this.element).find('.ajp-scrollable > ul:eq(0)')
							.css({ position: 'relative', left: 0, top: 0 });

						var ctx = this
						$(options.prev).click(function () { ctx.prev() })
						$(options.next).click(function () { ctx.next() })

						$(document).bind('mousedown', function (evt) {
							ctx.scrollLeft = ctx.container.scrollLeft()
							ctx.scrollTop = ctx.container.scrollTop()
						})
						$(document).bind('mouseup', function (evt) {
							ctx.container.scrollLeft(ctx.scrollLeft)
							ctx.container.scrollTop(ctx.scrollTop)
						})
						$(this.element).find('.ajp-scrollable').scroll(function (evt) {
							$(this).scrollLeft(ctx.scrollLeft)
							$(this).scrollTop(ctx.scrollTop)
							return false
						})

						if (options.mousewheel) {
							try {
								$(this.element).find('.ajp-scrollable').mousewheel(function (evt, delta) {
									if (delta > 0) ctx.prev(); else ctx.next();
									ctx.cancelEvent(evt);
								})
							} catch (ex) { }
						}

						this.reinit()
						this.canSelect = true;

						if (options.current)
							this.selectItem(this.index = options.current)
					},

					reinit: function () {

						var items = this.container.children('li');
						this.nItems = items.length;

						items.eq(0).clone().appendTo(this.container);
						items.eq(this.nItems - 1).clone().prependTo(this.container);

						this.paddingLeft = parseInt(items.eq(0).css('padding-left'));
						this.paddingRight = parseInt(items.eq(0).css('padding-right'));
						this.paddingTop = parseInt(items.eq(0).css('padding-top'));
						this.paddingBottom = parseInt(items.eq(0).css('padding-bottom'));
						this.width = $(this.element).find('.ajp-scrollable').innerWidth();
						this.height = $(this.element).find('.ajp-scrollable').innerHeight();

						this.pack()
						this.toBegin();

						if (options.extensible && items.length == 0)
							this.extend(true)
					},

					pack: function () {

						if (options.orientation == 'horizontal') {
							this.container.css({
								width: '' + (this.width * (this.nItems + 2)) + 'px',
								height: '' + this.height + 'px'
							});
						} else {
							this.container.css({
								width: '' + this.width + 'px',
								height: '' + (this.height * (this.nItems + 2)) + 'px'
							});
						}

						var itemWidth = this.width - this.paddingLeft - this.paddingRight;
						var itemHeight = this.height - this.paddingTop - this.paddingBottom;
						var itemPadding = '' + this.paddingTop + 'px, '
							 + this.paddingRight + 'px, '
							 + this.paddingBottom + 'px, '
							 + this.paddingLeft + 'px';
						var itemFloating = (options.orientation == 'horizontal' ? 'left' : 'none')

						$(this.element).find('.ajp-scrollable > ul > li')
							.css({
								width: itemWidth,
								height: itemHeight,
								padding: itemPadding,
								display: 'block',
								'float': itemFloating
							})
					},

					appendItems: function (items) {
						if (this.nItems <= 0) {
							for (var i = 0; i < items.length; i ++)
								this.container.append('<li>' + items[i] + '</li>')
							this.reinit()
						} else {
							this.nItems += items.length;
							var place = (options.orientation == 'horizontal' ?
								this.container.children('li:last-child') :
								this.container.children('li').eq(this.nItems - items.length + 1));
							for (var i = 0; i < items.length; i ++)
								place.before('<li>' + items[i] + '</li>');
							this.container.children('li:eq(0)').html(items[i - 1]);
							this.pack()
						}
					},

					extend: function (x) {
						var ctx = this;
						var ext = options.extensible;
						if (ext) {
							var u = ext.getUrl(ctx.nItems);
							$.getJSON(u.url, u.params, function (resp) {
								var items = [];
								var n = ext.getCount(resp);
								for (var i = 0; i < n; i ++)
									items.push(ext.getItem(resp, i));
								ctx.appendItems(items);
							})
						}
					},

					selectItem: function (i) {

						if (this.canSelect == false)
							return;
                                                this.canSelect = false;

						var ctx = this;
						var callback = function () {
							if (i >= ctx.nItems) {
								ctx.toBegin()
							} else if (i < 0) {
								ctx.toEnd()
							}
							ctx.canSelect = true; 
						}
						if (options.extensible && (ctx.nItems - i) <= options.extensible.critical)
							this.extend();
						this.index = i;
						if (options.orientation == 'horizontal') {
							this.container.animate({ left: '' + (-(this.index + 1) * this.width) + 'px' },
								options.duration, options.easing, callback);
						} else {
							this.container.animate({ top: '' + (-(this.index + 1) * this.height) + 'px' },
								options.duration, options.easing, callback);
						}
					},

					next: function () { this.selectItem(this.index + 1) },
					prev: function () { this.selectItem(this.index - 1) },

					toBegin: function () {
						this.index = 0;
						if (options.orientation == 'horizontal') {
							this.container.css({ left: '-' + this.width + 'px' });
						} else {
							this.container.css({ top: '-' + this.height + 'px' });
						}
					},

					toEnd: function () {
						this.index = this.nItems - 1;
						if (options.orientation == 'horizontal') {						
							this.container.css({ left: '-' + ((this.index + 1) * this.width) + 'px' });
						} else {
							this.container.css({ top: '-' + ((this.index + 1) * this.height) + 'px' });
						}
					}
				}

				api.init()
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.slider = { version: '0.2pa', installed: false, controls: [], serial: 1 }

	$.fn.extend({

		ajp$slider: function (options) {

			var defaults = {
				min: 0.0,
				max: 1.0,
				value: 0.0,
				onchange: function (val, $slider) { }
			}

			var opts = $.extend(defaults, options);
			if (opts.min > opts.max) {
				var m = opts.min
				opts.min = opts.max
				opts.max = m
			}
			if (opts.value < opts.min) opts.value = opts.min
			if (opts.value > opts.max) opts.value = opts.max

			if (!$.ajp.slider.installed) {
				var savedVal = $.fn.val
				$.fn.val = function (value) {
					if (typeof $(this).data('ajp-slider-value') != 'undefined') {
						var ctx = $(this).ajp$sliderContext()
						return (typeof value == 'undefined' ? ctx.get() : ctx.set(value))
					}
					return savedVal.call(this, value)
				}
				$.ajp.slider.installed = true
			}

			return this.each(function(i, el) {

				var $el = $(el)
				var $sl = $('<div class="control"></div>')
				var $lln = $('<div class="left-line"></div>')
				var $ln = $('<div class="line"></div>')

				$el.append($ln)
				$el.append($sl)
				$el.append($lln)

				function shift(dx, raiseEvent) {
					var w = $ln.outerWidth() - $sl.outerWidth()
					var l = parseInt($sl.css('left')) + dx
					if (l < 0) l = 0
					if (l > w) l = w
					$lln.css('width', l.toString() + 'px')
					$sl.css('left', l.toString() + 'px')
					var val = opts.min + (l/w) * (opts.max - opts.min)
					$el.data('ajp-slider-value', val)
					if (typeof raiseEvent == 'undefined' || raiseEvent)
						opts.onchange(val, $el)
				}

				var mouse = { x: 0, y: 0, down: false }
				var root = $('html')[0]

				$sl.mousedown(function (evt) {
					mouse.down = true
					mouse.x = evt.clientX
					mouse.y = evt.clientY
					mouse.sel = root.onselectstart
					root.onselectstart = function () { return false }
				})
				$(document).mouseup(function (evt) {
					mouse.down = false
					mouse.x = evt.clientX
					mouse.y = evt.clientY
					root.onselectstart = mouse.sel
				}).mousemove(function (evt) {
					if (mouse.down) {
						var dx = evt.clientX - mouse.x 
						var dy = evt.clientY - mouse.y
						shift(dx)
						mouse.x = evt.clientX
						mouse.y = evt.clientY
					}
				})

				function setValue(value, raiseEvent) {
					var w = $ln.outerWidth() - $sl.outerWidth()
					var dx = ((value - opts.min) * w) / (opts.max - opts.min)
					$sl.css('left', 0)
					shift(dx, raiseEvent)
				}

				var id = $.ajp.slider.serial ++
				$.ajp.slider.controls[id] = setValue
				$el.data('ajp-slider-id', id)

				setValue(opts.value)
			})
		},

		ajp$sliderContext: function () {
			var ctx = this
			return {
				set: function (value, raiseEvent) {
					ctx.each(function () {
						var f = $.ajp.slider.controls[$(this).data('ajp-slider-id')]
						if (f) f(value, raiseEvent)
					})
				},
				get: function () {
					return ctx.data('ajp-slider-value')
				}
			}
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.starating = { version: '0.4pa', installed: false, opts: [], serial: 1 }

	$.fn.extend({

		ajp$starating: function (options) {

			var defaults = {
				starClass: 'star',
				rating: 0,
				width: 16,
				height: 16,
				nStars: 5,
				image: 'star-ratings.png',
				onchange: undefined, // function (value, star) { ... }
				voteHandler: undefined // function (vote, star) { $(star).parent().ajp$staratingContext().set(vote) }
			}

			var options = $.extend(defaults, options)

			if (!$.ajp.starating.installed) {
				var savedVal = $.fn.val
				$.fn.val = function (value) {
					if (typeof $(this).data('ajp-starating-value') != 'undefined') {
						var ctx = $(this).ajp$staratingContext()
						return (typeof value == 'undefined' ? ctx.get() : ctx.set(value))
					}
					return savedVal.call(this, value)
				}
				$.ajp.starating.installed = true
			}

			this.css({
				width: '' + (options.width * options.nStars) + 'px',
				height: '' + options.height + 'px',
				cursor: (options.voteHandler ? 'pointer' : 'auto')
			})

			this.each(function () {
				var id = $.ajp.starating.serial ++
				$(this).data('ajp-starating-id', id)
				$.ajp.starating.opts[id] = options
			})

			var starSelector = (/^\./.test(options.starClass) ? options.starClass : '.' + options.starClass)
			if (options.voteHandler) {
				this.each(function () {
					var n = $(this).find(starSelector).length
					while (n < options.nStars) {
						$(this).append('<div class="' + options.starClass + '"></div>')
						n ++
					}
				})
			}

			this.find(starSelector).css({
				width: '' + options.width + 'px',
				height: '' + options.height + 'px',
				'float': 'left'
			})

			if (typeof options.rating == 'function') {
				this.each(function () {
					var $el = $(this)
					$el.ajp$staratingContext().set(options.rating($el))
				})
			} else {
				this.ajp$staratingContext().set(options.rating)
			}

			if (options.voteHandler) {

				this.find(starSelector).mouseover(function () {
					var star = $(this).index() + 1
					$(this).parent().css('background-position', '0 -' + (options.height * 2 * star) + 'px')
				}).click(function () {
					var vote = $(this).index() + 1
					options.voteHandler(vote, this)
				})

				this.mouseout(function (){
					var originalresult = $(this).data('ajp-starating-value')
					$(this).ajp$staratingContext().set(originalresult)
				})


			}
		},

		ajp$staratingContext: function () {
			var ctx = this
			return {
				set: function (r) {
					ctx.data('ajp-starating-value', r)
					var h = (Math.round(r) > r ? 1 : 0)
					$(ctx).each(
						function () {
							var $el = $(this)
							var opts = $.ajp.starating.opts[$el.data('ajp-starating-id')]
							$(ctx).css({
								'background-image': 'url(' + (typeof opts.image == 'function' ? opts.image(r, $el) : opts.image) + ')'
							})
							if (opts.onchange)
								opts.onchange(r, this)
						}
					)
					$(ctx).css('background-position', '0 -' + ($(ctx).height() * (2 * parseInt(r) + h)) + 'px')
				},
				get: function () {
					return ctx.data('ajp-starating-value')
				}
			}
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.tagscloud = { version: '0.2pa' }

	$.fn.extend({

		ajp$tagscloud: function (options) {

			var defaults = {

				tags: [],

				loPerc: 100,
				hiPerc: 150
			}

			var opts = $.extend(defaults, options);

			return this.each(function(i, el) {

				var api = {

					init: function () {
						var t = (typeof opts.tags === 'function' ? opts.tags(el) : opts.tags)
						var _min = 0;
						var _max = 0;
						for (var i = 0; i < t.length; i ++) {
							var c = t[i].weight;
							_min = (c > _min) ? _min : c;
							_max = (c < _max) ? _max : c;
						}
						var _m = (opts.hiPerc - opts.loPerc) / (_max - _min);
						$(el).empty();
						for (var i = 0; i < t.length; i ++)
							$(el).append('<a' + (t[i].href ? ' href="' + t[i].href + '"' : '')
								+ ' title="' + (t[i].title ? t[i].title : t[i].weight) + '" style="font-size: '
								+ (opts.loPerc + ((_max - (_max - (t[i].weight - _min))) * _m))
								+ '%">' + t[i].tag + '</a> ')
					}
				}

				api.init()
			})
		}
	})

})(jQuery);
/*
	Copyright (c) 2011 Andrey O. Zbitnev (azbitnev@gmail.com)
	Licensed under the MIT License (LICENSE.txt).

	$Id$
*/

(function ($) {

	if (!$.ajp) $.ajp = { }
	$.ajp.tooltip = { version: '0.3pa' }

	$.fn.extend({

		ajp$tooltip: function (options) {

			var defaults = {
				content: function ($e) {
					return $e.data('ajp-tooltip')
				},
				show: function ($t, x, y, $e) {
					$t.css({ display: 'block', left: x, top: y })
				},
				hide: function ($t, $e) {
					$t.css({ display: 'none' })
				}
			}

			var opts = $.extend(defaults, options);

			return this.each(function(i, el) {
				var $el = $(el)
				var c = (typeof opts.content == 'function' ? opts.content($el) : opts.content)
				var t = $('<div class="ajp-tooltip"><div class="top"></div><div class="middle"></div><div class="bottom"></div></div>').appendTo('body')
				t.css({
					position: 'absolute',
					left: 0,
					top: 0,
					display: 'none'
				}).find('.middle').html(c)
				$(el).hover(
					function () {
						var o = $el.offset()
						var h = t.outerHeight()
						var w = t.outerWidth()
						opts.show(t, o.left - (w - $el.outerWidth()) / 2, o.top - h, $el)
					},
					function () {
						opts.hide(t, $el)
					}
				)
			})
		}
	})

})(jQuery);
